/*==============================================================================
 *  Title      : Mobilepad buttons
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 07.06.2016
 *==============================================================================
 */

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------

var down = function(o){ console.log('Down:', o); };
var up   = function(o){ console.log('Up:', o); };

//==============================================================================
// The Class
//==============================================================================

/**
 * Constructor
 * 
 * @param   {object} options    The JS object with initial class parameters
 * @returns {object}            A new instance of this class
 */
var mobilepadButtons = function (options) {

    this.game    = null;
    this.group   = null;
    this.buttons = {
        //Button1Name:{ onDown:function(){}, onUp:function(){} },
        //Button2Name:{ onDown:function(){}, onUp:function(){} },
        //Button3Name:{ onDown:function(){}, onUp:function(){} },
        //Button4Name:{ onDown:function(){}, onUp:function(){} },

        joystick: {
            trackball: false,
            sectors: 4,
            //sectorOffset: 60, // degrees
            //pointerAngle: 10,
            //onDown : function(p){ console.log('JD:', p); },//[function(){}, function(){}, function(){}, function(){}],
            //onUp   : function(p){ console.log('JU:', p); },//[function(){}, function(){}, function(){}, function(){}]
            onDown:[down,down,down,down],            
            onUp  :[up,up,up,up]            
        }
    };

    this._create(options);
    return this;

};

mobilepadButtons.prototype = {
//------------------------------------------------------------------------------
// Config
//------------------------------------------------------------------------------

    offsetX: 0,
    offsetY: 0,
    inverse: true,
    
//------------------------------------------------------------------------------
// Protected
//------------------------------------------------------------------------------

    /**
     * Initialization
     * 
     * @protected
     * @param {object} options  The JS object with initial class parameters
     */
    _init: function (options) {

        //--- Extend the instance:
        Phaser.Utils.extend(true, this, options); // by Phaser

    },
    
    _extend: function (source, dest) {
        return Phaser.Utils.extend(true, source, dest);
    },

    _show: function (obj) {
        obj.visible = true;
    },
    
    _hide: function (obj) {
        obj.visible = false;
    },

    _drawJoystick: function () {
        
        var  joystick = this.buttons.joystick,
            _joystick = this._buttons['joystick'];
        if (_joystick) _joystick.destroy();
        
        _joystick = this.game.make.graphics(joystick.cx, joystick.cy);
        _joystick.lineStyle(0); //1, 0xffffff, 0.5); 
        _joystick.beginFill(0xffffff, 0.25);
        _joystick.drawCircle(0, 0, joystick.d);
        _joystick.endFill();
        
        _joystick._params = joystick;
        
        this._buttons['joystick'] = _joystick;
        
        this._hide(_joystick); //<--- hide by default
        
        return _joystick;
        
    },
    
    _findSector: function (angle, joystick) {
        
        angle = (angle + joystick._sectorOffset) % (360 + joystick.sectorOffset);
        var offset = -joystick._sectorOffset;
        //console.log(angle);
        for (var i in joystick._sectors) {
            var sector = joystick._sectors[i];
            if (angle >= sector.right && angle <= sector.left) {
                return {id:i, right:sector.right + offset, left:sector.left + offset}; 
            }
        }
        return null;
    },
    
    _drawJoystickPointer: function (pointer, obj) {
        
        var b = obj.getBounds();
        
        var _jpointer = obj._jpointer;
        if (_jpointer) _jpointer.destroy();
        
        _jpointer = this.game.make.graphics(b.centerX, b.centerY); //(pointer.x, pointer.y);
        
        //--- Trackball:
        if (obj._params.trackball) {
            _jpointer.lineStyle(1, 0xffffff, 0.5); 
            _jpointer.beginFill(0xffffff, 0.25);
            _jpointer.drawCircle(pointer.x - b.centerX, pointer.y - b.centerY, 100);
            _jpointer.endFill();
        }
        
        //--- Sector:
        var a = this._getAngle(b.centerX, b.centerY, pointer.x, pointer.y);
        if (obj._params._sectors) {
            //--- Defined sector pointer:
            var sector = this._findSector(this._radToDeg(a), obj._params);
            if (sector) {
                _jpointer.lineStyle(1, 0xffffff, 0.5); 
                _jpointer.beginFill(0xffffff, 0.25);
                _jpointer.arc(0, 0, obj._params.r, -this._degToRad(sector.right), -this._degToRad(sector.left), true);
                _jpointer.endFill();
                
                if (typeof(obj._jpressed) != undefined) {
                    if (obj._jpressed != sector.id) {
                        if (obj._params.onUp && typeof(obj._params.onUp[obj._jpressed]) == 'function') obj._params.onUp[obj._jpressed](pointer, obj, sector);
                        obj._jpressed = sector.id;
                        if (obj._params.onDown && typeof(obj._params.onDown[sector.id]) == 'function') obj._params.onDown[sector.id](pointer, obj, sector);
                    }
                    
                } else {
                    obj._jpressed = sector.id;
                    if (obj._params.onDown && typeof(obj._params.onDown[sector.id]) == 'function') obj._params.onDown[sector.id](pointer, obj, sector);
                }
            }
        } else {
            //--- Free sector pointer:
                a = -a;
            var s = obj._params.pointerAngle || 45,
                u = this._degToRad(s);
            _jpointer.lineStyle(1, 0xffffff, 0.5); 
            _jpointer.beginFill(0xffffff, 0.25);
            _jpointer.arc(0, 0, obj._params.r, a + u, a - u, true);
            _jpointer.endFill(); 
         }
        //-----
        
        this.group.add(_jpointer);
        
        return obj._jpointer = _jpointer;
        
    },

    _drawPad: function (name) {
        
        var  pad = this.buttons[name],
            _pad = this._buttons[name];
        if (_pad) _pad.destroy();
        
        _pad = this.game.make.graphics(pad.cx, pad.cy);
        _pad.lineStyle(0); //1, 0xffffff, 0.5); 
        _pad.beginFill(0xffffff, 0.25);
        _pad.drawCircle(0, 0, pad.d);
        _pad.endFill();
        
        _pad._params = pad;

        this._buttons[name] = _pad;
        
        this._hide(_pad); //<--- hide by default
        
        return _pad;
    },
    
    _setJoystic: function () {
        
        var joystick = this.buttons.joystick,
            radius   = this.game.height / 4,
            diameter = radius*2,
            x0       = this.inverse ? this.game.width - radius - this.offsetX: radius + this.offsetX,
            y0       = this.game.height - radius - this.offsetY;
    
        joystick = this._extend(joystick, {cx: x0, cy:y0, d:diameter, r:radius});
        if (joystick.sectors) {
            //--- Pointer angle:
            joystick.pointerAngle = joystick.pointerAngle || 360 / this.buttons.joystick.sectors / 2;
            //--- Sectors:
            var sectorSize = 360 / this.buttons.joystick.sectors,
                sectorHalf = sectorSize / 2;
            //--- Offset from 0 angle:
            joystick.sectorOffset  = Math.abs(joystick.sectorOffset || 0); //--- user offset
            joystick._sectorOffset = sectorHalf;                           //--- offset from 0
            for (var i=0; i<joystick.sectors; i++) {
                var base  = sectorSize*i + joystick.sectorOffset,
                    right = base - sectorHalf + joystick._sectorOffset,
                    left  = base + sectorHalf + joystick._sectorOffset;
                joystick._sectors = joystick._sectors || [];
                joystick._sectors.push({base:base, right:right, left:left});
            }
            //---
        }
        //--- Add to the group:
        this.group.add( this._drawJoystick() );
        
    },
    
    _setPad: function () {
        
        var length = 0;
        var pads   = [];
        for(var name in this.buttons) {
            this.buttons[name].name = name;
            if (name == 'joystick') continue;
            pads[length] = this.buttons[name];
            length++; 
        }
        if (length == 0) return;
        
        var center   = this.game.height / 4,
            offset   = center / 1.7,
            radius   = this.game.height / 10,
            diameter = radius*2,
            x0       = !this.inverse ? this.game.width - center - this.offsetX: center + this.offsetX,
            y0       = this.game.height - center - this.offsetY;

        switch (length) {
            case 1:
                pads[0] = this._extend(pads[0], {cx:0, cy:0, d:diameter, r:radius});
                break;
            case 2:
                offset = center / 2.3;
                pads[0] = this._extend(pads[0], {cx:x0 + 0, cy:y0 - offset, d:diameter, r:radius});
                pads[1] = this._extend(pads[1], {cx:x0 + 0, cy:y0 + offset, d:diameter, r:radius});
                break;
            case 3:
                pads[0] = this._extend(pads[0], {cx:x0 + 0, cy:y0 - offset, d:diameter, r:radius});
                pads[1] = this._extend(pads[1], {cx:x0 + 0, cy:y0 + offset, d:diameter, r:radius});
                pads[2] = this._extend(pads[2], {cx:x0 + offset * (this.inverse ? -1: 1), cy: y0 + 0, d:diameter, r:radius});
                break;
            case 4:
                pads[0] = this._extend(pads[0], {cx:x0 + 0, cy:y0 - offset, d:diameter, r:radius});
                pads[1] = this._extend(pads[1], {cx:x0 + 0, cy:y0 + offset, d:diameter, r:radius});
                pads[2] = this._extend(pads[2], {cx:x0 - offset, cy:y0 + 0, d:diameter, r:radius});
                pads[3] = this._extend(pads[3], {cx:x0 + offset, cy:y0 + 0, d:diameter, r:radius});
                break;
        }
       
        //--- Add to the group:
        for (var name in this.buttons) {
            if (name == 'joystick') continue;
            this.group.add( this._drawPad(name) );
        }
        
    },
    
    /**
     * Returns a distance between two points
     * 
     * @param   {Number} x1 The first  point X 
     * @param   {Number} y1 The first  point Y
     * @param   {Number} x2 The second point X
     * @param   {Number} y2 The second point Y
     * @returns {Number} The distance between two points (in pixels)
     */
    
    _getDinstance: function (x1, y1, x2, y2) {
        return Math.sqrt( Math.pow(Math.abs(x1 - x2), 2) + Math.pow(Math.abs(y1 - y2), 2) );
    },
    
    /**
     * Returns an anlge between a center point and a other point
     * 
     * @param   {Number}  centerX A center point X
     * @param   {Number}  centerY A center point Y
     * @param   {Number}  x       An other point X
     * @param   {Number}  y       An other point Y
     * @param   {Boolean} deg     If true, returns value of an angle in degrees (CCW), othrewise returns value of an angle in radians 
     * @returns {Number}  An anlge
     */
    _getAngle: function (centerX, centerY, x, y, deg) {
        
        var dx = centerX - x,
            dy = centerY - y,
            a  = Math.PI - Math.atan2(dy, dx); //--- angle in radians (CCW)
            if (deg) a = this._radToDeg(a);    //--- angle in degrees (CCW) (против часовой)
            //console.log('angle: '+ a); //Math.floor(a));
        return a;
        
    },
    
    _degToRad: function (deg) {
        return deg*0.017; // (deg * Math.PI / 180)
    },
    
    _radToDeg: function (rad) {
        return rad*57.3; // (rad * 180 / Math.PI)
    },
    
    _isPointerInside: function (pointer, obj) {
        
        var p = pointer.position,
            b = obj.getBounds();
        //--- Circle:
        if (this._getDinstance(p.x, p.y, b.centerX, b.centerY) < obj._params.r) 
            return true;
        //--- Rectangle:
        //if (p.x > b.left && p.x < b.right && p.y > b.top && p.y < b.bottom) 
        //  return true;
        return false;
        
    },
    
    _showJoystick: function (pointer, obj) {
        
        if (obj._params.name != 'joystick') return;
        this._drawJoystickPointer(pointer, obj);
        
    },
    
    _hideJoystick: function (obj) {
        
        if (obj._params.name != 'joystick') return;
        obj._jpointer.destroy();
        //---
        if (obj._params.onUp && typeof(obj._params.onUp[obj._jpressed]) == 'function') obj._params.onUp[obj._jpressed](obj);
        
    },
    
    _press: function (pointer, obj) {
        
        if (!obj._params.state || obj._params.name === 'joystick') {
            obj._params.state = pointer.id;
            this._show(obj);
            this._showJoystick(pointer, obj);
            //--- Trigger event:
            if (typeof(obj._params.onDown) == 'function') obj._params.onDown(pointer, obj);
            //console.log(obj._params.name + ' pressed');
        }
        
    },
    
    _release: function (pointer, obj) {
        
        if (obj._params.state) {
            obj._params.state = null;
            this._hide(obj);
            this._hideJoystick(obj);
            //--- Trigger event:
            if (typeof(obj._params.onUp) == 'function') obj._params.onUp(pointer, obj);
            //console.log(obj._params.name + ' released');
        }
        
    },

    _onReleasePointer: function (pointer) {
        
        for (var name in this._buttons) {
            var obj = this._buttons[name];
            if (obj._params.state == pointer.id) {
                this._release(pointer, obj);
            }
        }
        
    },
   
    _onMove: function(pointer) {
        
        for (var name in this._buttons) {
            if (this._isPointerInside(pointer, this._buttons[name])) {
                this._press(pointer, this._buttons[name]);
            } else {
                this._release(null, this._buttons[name]);
            }
        }
        
        
    },
    
    _create: function (options) {
        
        this._init(options);
        //--- Game group:
        this.group = this.group || this.game.add.group();
        //--- Init real buttons:
        this._buttons  = {}; 
        //--- Camera fixed:
        this.group.fixedToCamera = true;
        this.group.cameraOffset.x = 0;
        this.group.cameraOffset.y = 0;
        //this.group.visible = true; // false; // true;
        //--- Create buttons:
        this.setButtons();
        //--- Event handlers:
        this.game.input.onUp.add(this._onReleasePointer,   this);     //--- release
        this.game.input.addMoveCallback(this._onMove, this); //--- press
        
    },    
    
//------------------------------------------------------------------------------
// Public
//------------------------------------------------------------------------------

    setButtons: function () {
        this._setJoystic();
        this._setPad();
    }

};

//==============================================================================
// Exports module values:
//==============================================================================

module.exports = {
    /**
     * The class to inherit
     * 
     * example:
     * 
     * function childClass() {
     *      theclass.apply(this, arguments);
     * }
     * 
     * childClass.prototype = Object.create(theclass.prototype);
     * childClass.prototype.constructor = childClass;
     * 
     */
    theclass: mobilepadButtons,
    
    /**
     * The class factory
     * 
     * @param   {object} options The JS object with initial class parameters
     * @returns {object}         A new instance of this class
     */
    create: function (options) {
        return new mobilepadButtons(options);
    },
    
    preload: function (game) {
        game.load.atlas('mobilepadButtons',  'assets/sprites/controls/gamepad.png', 'assets/sprites/controls/gamepad.json');
        game.load.image('mobilepadJoystick', 'assets/sprites/controls/joystick2.png');
    }


};