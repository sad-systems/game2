/*==============================================================================
 *  Title      : Mobilepad buttons
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 07.06.2016
 *==============================================================================
 */

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------

//==============================================================================
// The Class
//==============================================================================

/**
 * Constructor
 * 
 * @param   {object} options    The JS object with initial class parameters
 * @returns {object}            A new instance of this class
 */
var mobilepadButtons = function (options) {

    this.game    = null;
    this.group   = null;
    this.buttons = {
        pad:{
            A:{},
            B:{},
            C:{}
            //D:{},
        },
        joystick: {
            
        }
    };

    this._create(options);
    return this;

};

mobilepadButtons.prototype = {
//------------------------------------------------------------------------------
// Config
//------------------------------------------------------------------------------

    offsetX: 0,
    offsetY: 0,
    inverse: true,
    
//------------------------------------------------------------------------------
// Protected
//------------------------------------------------------------------------------

    /**
     * Initialization
     * 
     * @protected
     * @param {object} options  The JS object with initial class parameters
     */
    _init: function (options) {

        //--- Extend the instance:
        Phaser.Utils.extend(true, this, options); // by Phaser

    },

    _setJoystic: function () {
        
        this._jr = this.game.height / 4;
        this._jx = this.inverse ? this.game.width - this._jr - this.offsetX: this._jr + this.offsetX;
        this._jy = this.game.height - this._jr - this.offsetY;
        //--- Draw:
        if (this._joystick) this._joystick.destroy();
        this._joystick = this.game.make.graphics(this._jx, this._jy);
        this._joystick.lineStyle(0); //1, 0xffffff, 0.5); 
        this._joystick.beginFill(0xffffff, 0.25);
        this._joystick.drawCircle(0, 0, this._jr*2); //console.log(this._joystick, this._jx, this._jy);
        this._joystick.endFill();
        this.group.add(this._joystick);
        
    },
    
    _setPad: function () {
        var length = 0; 
        for(var i in this.buttons.pad) length++; 
        if (length == 0) return;
        
        this._pc = this.game.height / 4;
        this._ph = this._pc / 1.7;
        this._pr = this.game.height / 10;
        this._pd = this._pr*2;
        this._px = !this.inverse ? this.game.width - this._pc - this.offsetX: this._pc + this.offsetX;
        this._py = this.game.height - this._pc - this.offsetY;
        //--- Draw:
        if (this._pad) this._pad.destroy();
        this._pad = this.game.make.graphics(this._px, this._py);
        this._pad.lineStyle(0); //1, 0xffffff, 0.5); 
        this._pad.beginFill(0xffffff, 0.25);
        switch (length) {
            case 1:
                this._pad.drawCircle(0, 0, this._pd);
                break;
            case 2:
                this._ph = this._pc / 2.3;
                this._pad.drawCircle(0, -this._ph, this._pd);
                this._pad.drawCircle(0,  this._ph, this._pd);
                break;
            case 3:
                this._pad.drawCircle(0, -this._ph, this._pd);
                this._pad.drawCircle(0,  this._ph, this._pd);
                this._pad.drawCircle(this._ph * (this.inverse ? -1: 1),  0, this._pd);
                break;
            case 4:
                this._pad.drawCircle(0, -this._ph, this._pd);
                this._pad.drawCircle(0,  this._ph, this._pd);
                this._pad.drawCircle(-this._ph, 0, this._pd);
                this._pad.drawCircle( this._ph, 0, this._pd);
                break;
        }
        this._pad.endFill();
        this.group.add(this._pad);
        
    },
    
    _create: function (options) {
        
        this._init(options);
        this.group = this.group || this.game.add.group();
        //--- Camera fixed:
        this.group.fixedToCamera = true;
        this.group.cameraOffset.x = 0;
        this.group.cameraOffset.y = 0;
        this.group.visible = false; //true;
        //---------------------
        this.setButtons();
        
    },    
    
//------------------------------------------------------------------------------
// Public
//------------------------------------------------------------------------------

    setButtons: function () {
        this._setJoystic();
        this._setPad();
    }

};

//==============================================================================
// Exports module values:
//==============================================================================

module.exports = {
    /**
     * The class to inherit
     * 
     * example:
     * 
     * function childClass() {
     *      theclass.apply(this, arguments);
     * }
     * 
     * childClass.prototype = Object.create(theclass.prototype);
     * childClass.prototype.constructor = childClass;
     * 
     */
    theclass: mobilepadButtons,
    
    /**
     * The class factory
     * 
     * @param   {object} options The JS object with initial class parameters
     * @returns {object}         A new instance of this class
     */
    create: function (options) {
        return new mobilepadButtons(options);
    },
    
    preload: function (game) {
        game.load.atlas('mobilepadButtons',  'assets/sprites/controls/gamepad.png', 'assets/sprites/controls/gamepad.json');
        game.load.image('mobilepadJoystick', 'assets/sprites/controls/joystick2.png');
    }


};