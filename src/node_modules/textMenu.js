/*==============================================================================
 *  Title      : Text Menu
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 13.06.2016
 *==============================================================================
 */

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------

//==============================================================================
// The Class
//==============================================================================

/**
 * Constructor
 * 
 * @param   {object} options    The JS object with initial class parameters
 * @returns {object}            A new instance of this class
 */
var textMenu = function (game, options) {

    this.game  = game;
    this.group = null;
    this.items = [
    //   {text: 'The text', onDown:function(o){ ... }, disable:false }        
    ];

    this._create(options);
    return this;

};

textMenu.prototype = {
//------------------------------------------------------------------------------
// Config
//------------------------------------------------------------------------------

    styles: {
        
        normal: {
            fill            : '#ffd801',
            stroke          : '#bb9c2e',// '#296e2d',
            strokeThickness : 5,
            shadowOffsetX   : 3,
            shadowOffsetY   : 3,
            shadowFill      : true,
            shadowBlur      : 3,
            shadowColor     : 'rgba(0,0,0,0.5)'
        },
        
        disable: {
            fill            : '#888888',
            stroke          : '#aaaaaa',
            strokeThickness : 4,
            shadowOffsetX   : 3,
            shadowOffsetY   : 3,
            shadowFill      : true,
            shadowBlur      : 3,
            shadowColor     : 'rgba(0,0,0,0.5)'
        },
        
        over: {
            //stroke : '#6c0c0c'
            fill : '#fdec8c'
        },
        
        out: {
            fill : '#ffd801'
        },
        
        down: {
            fill   : '#6c0c0c', //'#aa0000'
            //strokeThickness : 0,
            shadowFill      : false
        },
        
        up: {
            fill : '#ffd801',
            strokeThickness : 5,
            shadowFill      : true
        }
    },
    
//------------------------------------------------------------------------------
// Protected
//------------------------------------------------------------------------------

    /**
     * Initialization
     * 
     * @protected
     * @param {object} options  The JS object with initial class parameters
     */
    _init: function (options) {

        //--- Extend the instance:
        Phaser.Utils.extend(true, this, options); // by Phaser

    },

    _create: function (options) {
        
        this._init(options);
        //--- Game group:
        this.group = this.group || this.game.add.group();
        this.group.x = this.x || this.game.camera.view.centerX;
        this.group.y = this.y || this.game.camera.view.centerY;
        //--- Items:
        this._createItems();
        
    },
    
    _createItems: function() {
        this.group.removeAll(true);
        this._x = 0; 
        this._y = 0;
        this._items = {};
        for(var i in this.items) {
            this.group.add(this._createItem(this.items[i]));
        };
    },    
    
    _setLabel: function(label, mode) {
        var style = this.styles[mode];
        for (var i in style) {
            label[i] = style[i];
        }
    },
    
    _createItem: function(item) {
        
        if (!item) return false;
        
        var button,
            label = this.game.make.text(0, 0, item.text);
            label.anchor.set(0.5, 0);
        
        if (!item.disable) {
            
            this._setLabel(label, 'normal');
            
            button = this.game.make.button(this._x, this._y, null, null, this);
            button.onInputOver.add(function(){ this._setLabel(label, 'over'); }, this);
            button.onInputOut.add (function(){ this._setLabel(label, 'out');  }, this);
            button.onInputDown.add(function(){ 
                this._setLabel(label, 'down'); 
                if (typeof(item.onDown) === 'function') item.onDown(item); 
            }, this);
            button.onInputUp.add  (function(){ this._setLabel(label, 'up');   }, this);
            button.addChild(label);
            
        } else {
            
            this._setLabel(label, 'disable');
            label.x = this._x;
            label.y = this._y;
            button = label;
            
        }
        
        this._y += label.height;          

        return button;
        
    },

//------------------------------------------------------------------------------
// Public
//------------------------------------------------------------------------------

    update: function(options) {
        this._create(options);
    }
    
};

//==============================================================================
// Exports module values:
//==============================================================================

module.exports = {
    /**
     * The class to inherit
     * 
     * example:
     * 
     * function childClass() {
     *      theclass.apply(this, arguments);
     * }
     * 
     * childClass.prototype = Object.create(theclass.prototype);
     * childClass.prototype.constructor = childClass;
     * 
     */
    theclass: textMenu,
    
    /**
     * The class factory
     * 
     * @param   {object} options The JS object with initial class parameters
     * @returns {object}         A new instance of this class
     */
    create: function (game, options) {

        return new textMenu(game, options);

    }

};