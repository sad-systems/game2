/*==============================================================================
 *  Title      : Gamepad buttons class
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 06.05.2016
 *==============================================================================
 */

//------------------------------------------------------------------------------
// Private static
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Class
//------------------------------------------------------------------------------

/**
 * Constructor
 * 
 * @param   {object} options    The JS object with initial class parameters
 * @returns {object}            A new instance of this class
 */
var __theClass = function (options) {

    //--- Default class config:
    this.config = {
        game: null,
        x: 5,             //--- x border offset for joystic & pad section
        y: 5,             //--- y border offset for joystic & pad section
        xCenterOffset: 8, //--- x cener offset for joystic & pad section
        yCenterOffset: 8, //--- y cener offset for joystic & pad section
        inverse: false,   //--- change position pad & joystic
        visible: false,   //--- set gamepad visible
        buttons: {
            //  Fire: { x:0, y:0, onDown:function(o){ console.log('Fire Down'); }, onUp:function(o){ console.log('Fire Up'); } }
            //    Up: { x:0, y:0, onDown:function(o){ console.log('Up'); } },
            //  Down: { x:0, y:0, onDown:function(o){ console.log('Down'); } },
            //  Left: { x:0, y:0, onDown:function(o){ console.log('Left'); } },
            // Right: { x:0, y:0, onDown:function(o){ console.log('Right'); } },
            //     A: { x:0, y:0, onDown:function(o){ console.log('A'); } },
            //     B: { x:0, y:0, onDown:function(o){ console.log('B'); } },
            //     C: { x:0, y:0, onDown:function(o){ console.log('C'); } },
            //     D: { x:0, y:0, onDown:function(o){ console.log('D'); } }
        },
        joystickButtonNames: [
            'Up',   //--- 0 Up
            'Down', //--- 1 Down
            'Left', //--- 2 Left
            'Right' //--- 3 Right
        ],
        padButtonNames: [
            'Fire', //--- 0 Fire
            'A',    //--- 1 A
            'B',    //--- 2 B
            'C',    //--- 3 C
            'D'     //--- 4 D
        ],
        atlasId: 'gamepadButtons',
        frameStateNames: [
            'Norm', //--- 0 Normal
            'Over', //--- 1 Over 
            'Down'  //--- 2 Down
        ],
        frameDefaultName:  'A',
        frameFlipLeftName: 'Right',
        frameExt:          '.png'        
    };

    //--- Init the class:
    this.init(options);

    return this;
};

/**
 * Initialization
 * 
 * @param {object} options  The JS object with initial class parameters
 */
__theClass.prototype.init = function (options) {

    //--- Extend the config:
    Phaser.Utils.extend(true, this.config, options); // Phaser 
    
    this.game     = this.config.game;
    this._buttons = this.config.buttons;
    
    this.createButtons();

};

//------------------------------------------------------------------------------
// Public
//------------------------------------------------------------------------------

__theClass.prototype.show = function () {
    this.groupButtons.visible = true;
};

__theClass.prototype.hide = function () {
    this.groupButtons.visible = false;
};

__theClass.prototype.swap = function () {
    this.config.inverse = !this.config.inverse;
    this.setButtons();
};

__theClass.prototype.toggle = function () {
    this.groupButtons.visible = !this.groupButtons.visible;
};

__theClass.prototype.toggleWithInverse = function () {
    if (!this.groupButtons.visible) {
        this.show();
    } else {
        if (!this._toggleWithInverseState) {
            this._toggleWithInverseState = true;
            this.swap();
        } else {
            this._toggleWithInverseState = false;
            this.hide();
        }
    }
};

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------

__theClass.prototype.createButtons = function () {
    
    this.groupButtons = this.game.add.group();
    this.groupButtons.x = 0;
    this.groupButtons.y = 0;
    //--- Camera fixed:
    this.groupButtons.fixedToCamera = true;
    this.groupButtons.cameraOffset.x = 0;
    this.groupButtons.cameraOffset.y = 0;
    this.groupButtons.visible = this.config.visible;
    //---------------------
    
    //--- Create buttons:
    for (var name in this._buttons) {
        var button = this._buttons[name];
            button      = button || {};
            button.name = button.name || name;
            button.x    = button.x || 0;
            button.y    = button.y || 0;
        button.own = this.addButton(button, this.groupButtons);
    }
    //--- Set positions:
    this.setButtons();
    
};

__theClass.prototype.isFrameExists = function(frameName) { return this.game.cache.getFrameByName(this.config.atlasId, frameName) ? true : false; };
__theClass.prototype.getFrameName  = function(frameBaseName, stateIndex) { 
    return frameBaseName + this.config.frameStateNames[stateIndex ? stateIndex : 0] + this.config.frameExt;
};
__theClass.prototype.getCenterDelta = function(param) {
    var param_name = '_delta_' + param;
    if (typeof(this[param_name]) !== 'undefined') return this[param_name]; 
    
    var index = 0, offset = 0;
    switch(param) {
        case 'width': 
            index  = 2;
            offset = this._joyCenterXOffset;
        break;
        case 'height': 
            index  = 0;
            offset = this._joyCenterYOffset;
        break;
        case 'width2': 
            index  = 2;
            param  = 'width';
            offset = this._padCenterXOffset;
        break;
        case 'height2': 
            index  = 0;
            param  = 'height';
            offset = this._padCenterYOffset;
        break;
        default: param = 'height';
    }
    var buttons = [
        this._buttons[this.config.joystickButtonNames[index]],   //2-left,  0-Up
        this._buttons[this.config.joystickButtonNames[index+1]]  //3-right, 1-Down
    ],
        delta = 0,
        count = 0;
    for (var i=0; i<2; i++) {
        if (buttons[i]) {
            delta += Math.abs(buttons[i].own[param]);
            count++;
        }
    }
    if (count) {
        delta /= count;
    }
return this[param_name] = delta + Math.abs(offset);    
};

__theClass.prototype.getJoystickCenterX = function() {
    return this._joystickCenterX = this._joyCenterXOffset + (this.config.inverse ? this._joystickX + this.getCenterDelta('width') : this._joystickX - this.getCenterDelta('width'));
};
__theClass.prototype.getJoystickCenterY  = function() {
    return this._joystickCenterY = this._joyCenterYOffset + this._joystickY - this.getCenterDelta('height');
};
__theClass.prototype.getPadCenterX = function() {
    return this._padCenterX = this._padCenterXOffset + (this.config.inverse ? this._padX - this.getCenterDelta('width2') : this._padX + this.getCenterDelta('width'));
};
__theClass.prototype.getPadCenterY  = function() {
    return this._padCenterY = this._padCenterYOffset + this._padY - this.getCenterDelta('height2');
};

__theClass.prototype.setButtonPosition = function(button) {
    var x = 0, y = 0;
    switch (button.name) {
        case this.config.joystickButtonNames[0]: //Up
                x = this.getJoystickCenterX() - button.width/2;
                y = this.getJoystickCenterY() - button.height;
                break;
        case this.config.joystickButtonNames[1]: //Down
                x = this.getJoystickCenterX() - button.width/2;
                y = this.getJoystickCenterY();
                break;
        case this.config.joystickButtonNames[2]: //Left
                x = this.getJoystickCenterX() - Math.abs(button.width);
                y = this.getJoystickCenterY() - button.height/2;
                break;
        case this.config.joystickButtonNames[3]: //Right
                x = this.getJoystickCenterX();
                y = this.getJoystickCenterY() - button.height/2;
                break;
        case this.config.padButtonNames[0]: //Fire
                x = this.getPadCenterX() - button.width/2;
                y = this.getPadCenterY() - button.height/2;
                break;    
        case this.config.padButtonNames[this.config.inverse ? 1 : 4]: //A
                x = this.getPadCenterX() + this.getCenterDelta('width2') - button.width; 
                y = this.getPadCenterY() - this.getCenterDelta('height2');
                break;    
        case this.config.padButtonNames[this.config.inverse ? 2 : 3]: //B
                x = this.getPadCenterX() + this.getCenterDelta('width2') - button.width; 
                y = this.getPadCenterY() + this.getCenterDelta('height2') - button.height;
                break;
        case this.config.padButtonNames[this.config.inverse ? 3 : 2]: //C
                x = this.getPadCenterX() - this.getCenterDelta('width2');
                y = this.getPadCenterY() + this.getCenterDelta('height2') - button.height;
                break;
        case this.config.padButtonNames[this.config.inverse ? 4 : 1]: //D
                x = this.getPadCenterX() - this.getCenterDelta('width2');
                y = this.getPadCenterY() - this.getCenterDelta('height2');
                break;
        default:
                x = this._padX - (this.config.inverse ? button.width : 0);
                y = this._padY - button.height;
        }
    button.x = x;
    button.y = y;
};

__theClass.prototype.setButtons = function () {
    
    if (!this.config.inverse) {
        this._joystickX = this.game.camera.view.width  - this.config.x;
        this._joystickY = this.game.camera.view.height - this.config.y;
        this._padX      = 0 + this.config.x;
        this._padY      = this._joystickY;
        
        this._joyCenterXOffset = -this.config.xCenterOffset;
        this._padCenterXOffset =  this.config.xCenterOffset;
    } else {
        this._padX      = this.game.camera.view.width  - this.config.x;
        this._padY      = this.game.camera.view.height - this.config.y;
        this._joystickX = 0 + this.config.x;
        this._joystickY = this._padY;
        
        this._joyCenterXOffset =  this.config.xCenterOffset;
        this._padCenterXOffset = -this.config.xCenterOffset;
    }
        this._padCenterYOffset = -this.config.yCenterOffset;
        this._joyCenterYOffset = -this.config.yCenterOffset;
    
    
    for (var name in this._buttons) {
        var button = this._buttons[name];
        this.setButtonPosition(button.own);
        //--- User corrected:
        button.own.x += button.x;
        button.own.y += button.y;
    }      
};

__theClass.prototype.addButton = function (button, buttonGroup) {
    var horisontalFlip = false;
    var frameBaseName  = button.name;
    var frameNormal    = this.getFrameName(frameBaseName);
    if (!this.isFrameExists(frameNormal)) {
        if (button.name === 'Left') {
            frameBaseName  = this.config.frameFlipLeftName;
            horisontalFlip = true;
        } else {
            frameBaseName = this.config.frameDefaultName;
        }
        frameNormal = this.getFrameName(frameBaseName);
    }
    var frameOver = this.getFrameName(frameBaseName, 1);
        frameOver = this.isFrameExists(frameOver) ? frameOver : this.getFrameName(frameBaseName);
    var frameDown = this.getFrameName(frameBaseName, 2);
        frameDown = this.isFrameExists(frameDown) ? frameDown : this.getFrameName(frameBaseName);

    var x, y;
    var bt = this.game.make.button(x, y, this.config.atlasId, null, this, frameOver, frameNormal, frameDown, frameNormal);
        bt.name = button.name;
        bt.anchor.setTo(0, 0);
        if (horisontalFlip) {
            bt.anchor.setTo(1, 0);
            bt.scale.setTo(-1,1);
        }
        //bt.justReleasedPreventsOver = Phaser.PointerMode.CONTACT;
        //bt.forceOut = false;
        //bt.alpha = 0.5;
        //bt.onInputOver.add(function(o){ o.alpha = 1; });
        //bt.onInputOut.add (function(o){ o.alpha = 0.5; });
        if (typeof(button.onDown) === 'function') bt.onInputDown.add(button.onDown);
        if (typeof(button.onUp) === 'function')   bt.onInputUp.add(button.onUp);
        //if (typeof(button.onDown) === 'function') bt.onInputOver.add(button.onDown);
        //if (typeof(button.onUp) === 'function')   bt.onInputOut.add(button.onUp);
    buttonGroup.add(bt);
    return bt;
};

//------------------------------------------------------------------------------
// Exports module values:
//------------------------------------------------------------------------------

module.exports = {
    /**
     * The class to inherit
     * 
     * example:
     * 
     * function childClass() {
     *      theclass.apply(this, arguments);
     * }
     * 
     * childClass.prototype = Object.create(theclass.prototype);
     * childClass.prototype.constructor = childClass;
     * 
     */
    theclass: __theClass,
    /**
     * The class factory
     * 
     * @param   {object} options The JS object with initial class parameters
     * @returns {object}         A new instance of this class
     */
    create: function (options) {
        return new __theClass(options);
    },
    
    preload: function (game) {
        game.load.atlas('gamepadButtons', 'assets/sprites/controls/gamepad.png', 'assets/sprites/controls/gamepad.json');
    }

};