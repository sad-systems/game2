/*==============================================================================
 *  Title      : Event manager
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 03.06.2016
 *==============================================================================
 */

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------

//==============================================================================
// The Class
//==============================================================================

/**
 * Constructor
 * 
 * @param   {object} options    The JS object with initial class parameters
 * @returns {object}            A new instance of this class
 */
var EventManager = function (options, context) {
    
    //--------------------------------------------------------------------------
    // Config 
    //--------------------------------------------------------------------------    
    
    this.context = this;
    this._events = [];
   
    //--------------------------------------------------------------------------    
    
    this._init(options, context);
    
    return this;

};

EventManager.prototype = {
    
//------------------------------------------------------------------------------
// Config
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Protected
//------------------------------------------------------------------------------
    /**
     * Initialization
     * 
     * @param {object} options  The JS object with initial class parameters
     */
    _init : function (options, context) {

        //--- Extend the config:
        //Phaser.Utils.extend(true, this, options); // Phaser
        
        for (var index in options) {
            var eventName = options[index];
            this._events[eventName] = new Phaser.Signal(); //[]
        }
        
        if (context) this.context = context;

    },
    
//------------------------------------------------------------------------------
// Public
//------------------------------------------------------------------------------
    
    on : function (eventName, callback, context) {
        
        this._events[eventName] = this._events[eventName] || Phaser.Signal(); //[];
        return this._events[eventName].add(callback, context || this.context);
        
    },
    
    once : function (eventName, callback, context) {
        
        this._events[eventName] = this._events[eventName] || Phaser.Signal(); //[];
        return this._events[eventName].addOnce(callback, context || this.context);
        
    },
    
    off : function (eventName, callback, context) {

        if (!this._events[eventName]) return;
        return this._events[eventName].remove(callback, context || this.context);
        
    },
    
    trigger : function (eventName, params) {

        if (!this._events[eventName]) return;
        this._events[eventName].dispatch(params);
        
    }

};

//==============================================================================
// Exports module values:
//==============================================================================

module.exports = EventManager;

/*

__theClass.prototype.on = function (eventName, callback) {
    this._events[eventName] = this._events[eventName] || [];
    if (this._events[eventName].indexOf(callback) >= 0) return;
    this._events[eventName].push(callback);
};

__theClass.prototype.off = function (eventName, callback) {
    if (!this._events[eventName]) return;
    var index = this._events[eventName].indexOf(callback);
    if (this._events[eventName].indexOf(callback) >= 0)
        delete this._events[eventName][index];
};

__theClass.prototype.trigger = function (eventName, params) {
    if (!this._events[eventName]) return;
    for (var name in this._events[eventName]) {
        if (typeof(this._events[eventName][name]) === 'function') 
            this._events[eventName][name](params);
    };
};

 */