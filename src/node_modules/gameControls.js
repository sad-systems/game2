/*==============================================================================
 *  Title      : Game controls
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 27.05.2016
 *==============================================================================
 */

var toolButtons      = require('toolButtons'),
    gamepadButtons   = require('gamepadButtons'),
    mobilepadButtons = require('mobilepadButtons'),
    arsenalButtons   = require('arsenalButtons');


//==============================================================================
// Exports module values:
//==============================================================================

module.exports = {
    
    preload: function(game) {
        
        toolButtons.preload(game);
        gamepadButtons.preload(game);
        mobilepadButtons.preload(game);
        arsenalButtons.preload(game);
        
    },
    
    create: function(game, playerInstance, mapManager, menuScene) {
        
        //--- Globals:
        var globals = game.extentions.globals;
        
        //--- Game mobilepad:
        var mp = mobilepadButtons.create({game:game,
            invisibleAlpha: 0.25,
            state:   globals.gameControl ? 1 : 0,
            inverse: globals.gameControl == 2 ? true : false,
            buttons:{
            a:      {
                        image: {name: 'mobilepadButtons', frame:'hand.png',  mode:0},
                        onDown:playerInstance.actionA.bind(playerInstance)
                    },
            //b:      {
            //            onDown:playerInstance.actionB.bind(playerInstance)
            //        },                
            //fire:   {
            //            onDown:playerInstance.actionSpace.bind(playerInstance)
            //        },
            joystick: {
                sectors: 4,
                //trackball: true,
                onDown :[
                    playerInstance.actionRight.bind(playerInstance),
                    playerInstance.actionUp.bind(playerInstance), 
                    playerInstance.actionLeft.bind(playerInstance), 
                    playerInstance.actionDown.bind(playerInstance)
                ],
                onUp   :[
                    playerInstance.actionRightRelease.bind(playerInstance),
                    playerInstance.actionUpRelease.bind(playerInstance),
                    playerInstance.actionLeftRelease.bind(playerInstance),
                    playerInstance.actionDownRelease.bind(playerInstance) 
                ]
            }
        }});
        game.scale.onFullScreenChange.add(function(){ mp.setButtons(); });
        //---------------

        //--- Capture keys: (hide from browser)
        var capturedKeys = [
            Phaser.KeyCode.UP,
            Phaser.KeyCode.DOWN,
            Phaser.KeyCode.LEFT,
            Phaser.KeyCode.RIGHT,
            Phaser.KeyCode.ALT,
            Phaser.KeyCode.CONTROL,
            Phaser.KeyCode.SPACEBAR
        ];
        for (var i=0; i<capturedKeys.length; i++) {
            game.input.keyboard.addKeyCapture(capturedKeys[i]);
        };
        //--- Keyboard callbacks:
        game.input.keyboard.addCallbacks(this, 
            //--- On key down:
            function(KeyboardEvent) {
                if(KeyboardEvent.repeat) return; //--- Do not capture repeating events
                switch (KeyboardEvent.keyCode) {
                    case Phaser.KeyCode.UP:       playerInstance.actionUp(); break;
                    case Phaser.KeyCode.DOWN:     playerInstance.actionDown(); break;
                    case Phaser.KeyCode.LEFT:     playerInstance.actionLeft(); break;
                    case Phaser.KeyCode.RIGHT:    playerInstance.actionRight(); break;
                    case Phaser.KeyCode.SPACEBAR: playerInstance.actionSpace(); break;
                    case Phaser.KeyCode.ALT:      playerInstance.actionA(); break;
                    //case Phaser.KeyCode.CONTROL:  playerInstance.actionB(); break;
                }
            }, 
            //--- On key up:
            function(KeyboardEvent) {
                  switch (KeyboardEvent.keyCode) {
                    case Phaser.KeyCode.UP:       playerInstance.actionUpRelease(); break;
                    case Phaser.KeyCode.DOWN:     playerInstance.actionDownRelease(); break;
                    case Phaser.KeyCode.LEFT:     playerInstance.actionLeftRelease(); break;
                    case Phaser.KeyCode.RIGHT:    playerInstance.actionRightRelease(); break;
                }
            }
        );

        //--- Arsenal buttons:
        var ab = arsenalButtons.create({
            game:       game,
            mapManager: mapManager,
            x:          10, 
            y:          10, 
            leftSide:   false,
            initState:  1, //0=hidden, 1=visible
            length:     playerInstance.collectedGoodsMax, 
            buttons: {
                Fire: { state:1, onDown:playerInstance.actionSpace.bind(playerInstance) }
                // S: { state:0, onDown:function(o){ o.setState(!o.state); console.log('S: ' + o.state); } }
            },
            onDown: null,
            onUp  : function (o) { 
                //--- Put the good:
                //console.log('Arsenal: '+o.name, o);
                if (o.owner.tile) {
                    playerInstance.actionB(o.owner.tile);
                }
            }
        });
        playerInstance.events.on('get', function(tile) { ab.push(tile); });
        playerInstance.events.on('put', function(tile) { ab.pop(tile);  });
        //--- Init the Arsenal:
        for (var i in playerInstance.collectedGoods) {
            ab.push(playerInstance.collectedGoods[i]);
        }

        //--- Tools buttons: 
        var buttons = {
            Fullscreen:{ state:game.scale.isFullScreen, onDown:function(o) { 
                            game.extentions.sceneManager.gotoFullScreen();
                            mapManager.resizeMap();
                            game.extentions.sceneManager.setCamera(playerInstance.player);
                            ab.refresh();
                            o.setState(game.scale.isFullScreen); 
                         }.bind(this) 
                       },
            Gamepad:   { state:mp.state, onDown:function(o){ o.setState(!o.state); mp.setState(o.state); } },
            Sound:     { state:globals.soundEnable, onDown:function(o){ o.setState(!o.state); globals.soundEnable = o.state; } },
            Music:     { state:globals.musicEnable, onDown:function(o){ o.setState(!o.state); globals.musicEnable = o.state; } },
            Menu:      { onDown:function(o){ game.extentions.sceneManager.next(menuScene); } },
            Settings:  {}
        };
        //--- Change icon for inverse gamepad:
        if (mp.inverse) {
            var _buttons = {};
            for (var i in buttons) {
                i == 'Gamepad' ? _buttons['Gamepad2'] = buttons['Gamepad'] : _buttons[i] = buttons[i];
            }
            buttons = _buttons;
        }
        var tb = toolButtons.create({game:game, x:10, y:10, buttons:buttons});
        //--------------------------------
     
    // Phaser.Events.onAddedToGroup.add(function(g){ console.log(g); },this,0);
     
        this.group = game.add.group();
        this.group.add(ab.groupButtons);
        this.group.add(tb.groupButtons);
        //this.group.add(gp.groupButtons);
        this.group.add(mp.group);
        game.world.bringToTop(this.group);
        return this.group;
    }

};