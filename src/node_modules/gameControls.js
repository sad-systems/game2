/*==============================================================================
 *  Title      : Game controls
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 27.05.2016
 *==============================================================================
 */

var toolButtons    = require('toolButtons'),
    gamepadButtons = require('gamepadButtons'),
    arsenalButtons = require('arsenalButtons');


//==============================================================================
// Exports module values:
//==============================================================================

module.exports = {
    
    preload: function(game) {
        
        //this.game.load.image('joystick', 'assets/sprites/controls/joystick2.png');
        toolButtons.preload(game);
        gamepadButtons.preload(game);
        
        arsenalButtons.preload(game);
        
    },
    
    create: function(game, playerInstance, mapManager, menuScene) {
        //--- Gamepad: -------------------

        var gp = gamepadButtons.create({game:game, buttons:{
            Up:     { 
                        onDown:playerInstance.actionUp.bind(playerInstance), 
                          onUp:playerInstance.actionUpRelease.bind(playerInstance) 
                    },
            Down:   { 
                        onDown:playerInstance.actionDown.bind(playerInstance), 
                          onUp:playerInstance.actionDownRelease.bind(playerInstance) 
                    },
            Left:   { 
                        onDown:playerInstance.actionLeft.bind(playerInstance), 
                          onUp:playerInstance.actionLeftRelease.bind(playerInstance) 
                    },
            Right:  { 
                        onDown:playerInstance.actionRight.bind(playerInstance), 
                          onUp:playerInstance.actionRightRelease.bind(playerInstance) 
                    },
            Fire:   {
                        onDown:playerInstance.actionSpace.bind(playerInstance)
                    },
            A:      {
                        onDown:playerInstance.actionA.bind(playerInstance)
                    },
            B:      {
                        onDown:playerInstance.actionB.bind(playerInstance)
                    }
            //C:     { onDown:function(o){ console.log('C'); } },
            //D:     { onDown:function(o){ console.log('D'); } },
        }});
        game.scale.onFullScreenChange.add(function(){ gp.setButtons(); });

        //--- Game pad 2:
        //var b = this.game.add.button(490 -10, 330 -10, 'joystick', null, this);
        //    b.fixedToCamera = true;
        //    b.alpha = 0.5;
        //---------------

        //--- Capture keys: (hide from browser)
        var capturedKeys = [
            Phaser.KeyCode.UP,
            Phaser.KeyCode.DOWN,
            Phaser.KeyCode.LEFT,
            Phaser.KeyCode.RIGHT,
            Phaser.KeyCode.ALT,
            Phaser.KeyCode.CONTROL,
            Phaser.KeyCode.SPACEBAR
        ];
        for (var i=0; i<capturedKeys.length; i++) {
            game.input.keyboard.addKeyCapture(capturedKeys[i]);
        };
        //--- Keyboard callbacks:
        game.input.keyboard.addCallbacks(this, 
            //--- On key down:
            function(KeyboardEvent) {
                if(KeyboardEvent.repeat) return; //--- Do not capture repeating events
                switch (KeyboardEvent.keyCode) {
                    case Phaser.KeyCode.UP:       playerInstance.actionUp(); break;
                    case Phaser.KeyCode.DOWN:     playerInstance.actionDown(); break;
                    case Phaser.KeyCode.LEFT:     playerInstance.actionLeft(); break;
                    case Phaser.KeyCode.RIGHT:    playerInstance.actionRight(); break;
                    case Phaser.KeyCode.SPACEBAR: playerInstance.actionSpace(); break;
                    case Phaser.KeyCode.ALT:      playerInstance.actionA(); break;
                    case Phaser.KeyCode.CONTROL:  playerInstance.actionB(); break;
                }
            }, 
            //--- On key up:
            function(KeyboardEvent) {
                  switch (KeyboardEvent.keyCode) {
                    case Phaser.KeyCode.UP:       playerInstance.actionUpRelease(); break;
                    case Phaser.KeyCode.DOWN:     playerInstance.actionDownRelease(); break;
                    case Phaser.KeyCode.LEFT:     playerInstance.actionLeftRelease(); break;
                    case Phaser.KeyCode.RIGHT:    playerInstance.actionRightRelease(); break;
                }
            }
        );

        //--- Arsenal buttons:
        var ab = arsenalButtons.create({
            game:     game, 
            x:        10, 
            y:        10, 
            leftSide: false, 
            length:   playerInstance.collectedGoodsMax, 
            buttons: {
                // S: { state:0, onDown:function(o){ o.setState(!o.state); console.log('S: ' + o.state); } }
            },
            onDown: null,
            onUp  : function (o) { console.log('Arsenal: '+o.name); }
        });

        //--- Tools buttons: 
        var tb = toolButtons.create({game:game, x:10, y:10, buttons:{
            Fullscreen:{ state:game.scale.isFullScreen, onDown:function(o) { 
                            game.extentions.sceneManager.gotoFullScreen();
                            mapManager.resizeMap();
                            game.extentions.sceneManager.setCamera(playerInstance.player);
                            ab.refresh();
                            o.setState(game.scale.isFullScreen); 
                         }.bind(this) 
                       },
            Music:     { state:0, onDown:function(o){ o.setState(!o.state); console.log('Music: ' + o.state); } },
            Sound:     { state:0, onDown:function(o){ o.setState(!o.state); console.log('Sound: ' + o.state); } },
            Gamepad:   { state:gp.groupButtons.visible, onDown:function(o){ gp.toggleWithInverse(); o.setState(gp.groupButtons.visible); } },
            Menu:      { onDown:function(o){ game.extentions.sceneManager.next(menuScene); } },
            Settings:  {}
        }});
        //--------------------------------
     
    // Phaser.Events.onAddedToGroup.add(function(g){ console.log(g); },this,0);
     
        this.group = game.add.group();
        this.group.add(ab.groupButtons);
        this.group.add(tb.groupButtons);
        this.group.add(gp.groupButtons);
        game.world.bringToTop(this.group);
        return this.group;
    }

};