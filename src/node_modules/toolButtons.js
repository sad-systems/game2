/*==============================================================================
 *  Title      : Tool buttons class
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 04.05.2016
 *==============================================================================
 */

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Class
//------------------------------------------------------------------------------

/**
 * Constructor
 * 
 * @param   {object} options    The JS object with initial class parameters
 * @returns {object}            A new instance of this class
 */
var __theClass = function (options) {
    
    //--- Default class config:
    this.config = {
        game: null,
        x:0,
        y:0,
        xIndent: 2,
        buttons: {
            //Fullscreen:{ state:game.scale.isFullScreen, onDown:function(o){ game.extentions.sceneManager.gotoFullScreen(); o.setState(game.scale.isFullScreen); } },
            //Music:     { state:0, onDown:function(o){ o.setState(!o.state); console.log('Music: ' + o.state); } },
            //Sound:     { state:0, onDown:function(o){ o.setState(!o.state); console.log('Sound: ' + o.state); } },
            //Gamepad:   { state:gp.groupButtons.visible, onDown:function(o){ gp.toggleWithInverse(); o.setState(gp.groupButtons.visible); } },
            //Settings:  {},
            //Menu:      { onDown:function(o){ game.extentions.sceneManager.next(menuScene); } }
        },
        atlasId: 'toolButtons',
        frameStateNames: [
            '', //--- 0 Normal
            'Over', //--- 1 Over 
            'Down'  //--- 2 Down
        ],
        frameDefaultName:  'Default',
        frameExt:          '.png' 
    };

    //--- Init the class:
    this.init(options);

    return this;
};

/**
 * Initialization
 * 
 * @param {object} options  The JS object with initial class parameters
 */
__theClass.prototype.init = function (options) {
    
    //--- Extend the config:
    Phaser.Utils.extend(true, this.config, options); // Phaser
    
    this.game     = this.config.game;
    this._x       = 0;
    this._y       = 0;
    this._buttons = this.config.buttons;
    
    this.createButtons();
    
};

__theClass.prototype.createButtons = function () {
    
    this.groupToolsButtons = this.game.add.group();
    this.groupToolsButtons.x = this.config.x;
    this.groupToolsButtons.y = this.config.y;
    //--- Camera fixed:
    this.groupToolsButtons.fixedToCamera = true;
    this.groupToolsButtons.cameraOffset.x = this.config.x;
    this.groupToolsButtons.cameraOffset.y = this.config.y;
    //console.log(this.groupToolsButtons.cameraOffset);
    //---------------------
    
    this._buttons.Settings = { onDown:function(o){ this.toolsPressed(o); }.bind(this) };
    
    for (var name in this._buttons) {
        var button       = this._buttons[name];
            button       = button || {};
            button.name  = button.name || name;
            button.state = typeof(button.state) === 'undefined' ? 1 : button.state ;
            button.x     = button.x || 0;
            button.y     = button.y || 0;
        button.own = this.addButton(button, this.groupToolsButtons);
    }
    
    this.applyMask();
    
    //--- Auto hide tools:
    this.toolsPressed(this._buttons.Settings.own);
    
};


__theClass.prototype.setButtonState = function (button, state) { button.state = state; this.showButtonState(button); };
__theClass.prototype.showButtonState = function (button) {
    switch (button.state){
        case 0: // unchecked
        case false:
            button.alpha = 0.5;
            break;
        case 1: // checked
        case true:
            button.alpha = 1;
            break;
    }
};

__theClass.prototype.isFrameExists = function(frameName) { return this.game.cache.getFrameByName(this.config.atlasId, frameName) ? true : false; };
__theClass.prototype.getFrameName  = function(frameBaseName, stateIndex) { 
    return frameBaseName + this.config.frameStateNames[stateIndex ? stateIndex : 0] + this.config.frameExt;
};
__theClass.prototype.addButton = function (button, buttonGroup) {
    var frameBaseName  = button.name;
    var frameNormal    = this.getFrameName(frameBaseName);
    if (!this.isFrameExists(frameNormal)) {
        frameBaseName = this.config.frameDefaultName;
        frameNormal   = this.getFrameName(frameBaseName);
    }
    var frameOver = this.getFrameName(frameBaseName, 1);
        frameOver = this.isFrameExists(frameOver) ? frameOver : this.getFrameName(frameBaseName);
    var frameDown = this.getFrameName(frameBaseName, 2);
        frameDown = this.isFrameExists(frameDown) ? frameDown : this.getFrameName(frameBaseName);

    var bt = this.game.make.button(this._x + button.x, this._y + button.y, this.config.atlasId, null, this, frameOver, frameNormal, frameDown);
        this._x += bt.width;
        this._w  = this._x;
        this._x += this.config.xIndent;
    var height = bt.height + button.y;
        this._h  = this._h > height ? this._h : height;
        bt.name  = button.name;
        bt.state = button.state;
        var self = this;
        bt.setState = function(state) { self.setButtonState(this, state); };
        bt.anchor.setTo(0, 0);
        this.showButtonState(bt);
        //bt.alpha = 0.5;
        bt.onInputOver.add(function(o){ o.blendMode = PIXI.blendModes.SCREEN; });
        bt.onInputOut.add (function(o){ o.blendMode = PIXI.blendModes.NORMAL; });
        if (typeof(button.onDown) === 'function') bt.onInputDown.add(button.onDown);
        if (typeof(button.onUp) === 'function')   bt.onInputUp.add(button.onUp);
    buttonGroup.add(bt);
    return bt;
};

__theClass.prototype.applyMask = function() {
    //	A mask is a Graphics object
    //var bounds = this.groupToolsButtons.getBounds();
    var mask = this.game.add.graphics(0, 0);
        mask.fixedToCamera = true;
        mask.beginFill(0xffffff);
    //    mask.drawRect(bounds.x, bounds.y, bounds.width*2, bounds.height);
        mask.drawRect(this.config.x, this.config.y, this._w*2, this._h);
    //	And apply it to the Sprite
    this.groupToolsButtons.mask = mask;    
};

__theClass.prototype.toolsPressed = function (btSettings) {
                
    function changeState() { btSettings._data.state = !btSettings._data.state; }

    var group = btSettings.parent;

    if (!btSettings._data) {
        var tweenHide = this.game.add.tween(group.cameraOffset),
            tweenShow = this.game.add.tween(group.cameraOffset),
            delayHide  = 1000,
            delayShow  = 500,
            easingHide = Phaser.Easing.Cubic.Out,
            easingShow = Phaser.Easing.Cubic.Out; //Phaser.Easing.Elastic.Out,
        tweenHide.onComplete.add(changeState, this);
        tweenHide.to({ x: this.config.x - btSettings.x }, delayHide, easingHide);
        tweenShow.onComplete.add(changeState, this);    
        tweenShow.to({ x: this.config.x }, delayShow, easingShow);
        btSettings._data = {
            state:  0,
            tweenHide: tweenHide,
            tweenShow: tweenShow
        };
    }

    if (btSettings._data.state) {
        btSettings._data.tweenShow.start();
    } else {
        btSettings._data.tweenHide.start();
    }
                    
}; 


//------------------------------------------------------------------------------
// Exports module values:
//------------------------------------------------------------------------------

module.exports = {
    
    /**
     * The class to inherit
     */
    theclass: __theClass,
    
    /**
     * The class factory
     * 
     * @param   {object} options The JS object with initial class parameters
     * @returns {object}         A new object of this class
     */
    create: function (options) { return new __theClass(options); }
    
};



