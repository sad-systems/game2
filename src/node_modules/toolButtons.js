/*==============================================================================
 *  Title      : Tool buttons class
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 04.05.2016
 *==============================================================================
 */

//==============================================================================
// Private
//==============================================================================

//------------------------------------------------------------------------------
// Class
//------------------------------------------------------------------------------

/**
 * Constructor
 * 
 * @param   {object} options    The JS object with initial class parameters
 * @returns {object}            A new instance of this class
 */
var ToolButtons = function (options) {
    
    //--------------------------------------------------------------------------
    // Config
    //--------------------------------------------------------------------------

    this.game      = null;
    this.x         = 0;
    this.y         = 0;
    this.xIndent   = 2;
    this.leftSide  = true;
    this.initState = 0; //0=hidden, 1=visible
    this.buttons   = {
        // Fullscreen:{ state:game.scale.isFullScreen, onDown:function(o){ game.extentions.sceneManager.gotoFullScreen(); o.setState(game.scale.isFullScreen); } },
        // Music:     { state:0, onDown:function(o){ o.setState(!o.state); console.log('Music: ' + o.state); } },
        // Sound:     { state:0, onDown:function(o){ o.setState(!o.state); console.log('Sound: ' + o.state); } },
        // Gamepad:   { state:gp.groupButtons.visible, onDown:function(o){ gp.toggleWithInverse(); o.setState(gp.groupButtons.visible); } },
        // Settings:  {},
        // Menu:      { onDown:function(o){ game.extentions.sceneManager.next(menuScene); } }
    };
    this.groupButtons = null;
    
    //--------------------------------------------------------------------------
    
    this._createButtons(options);
    return this;
    
};

ToolButtons.prototype = {
    
//------------------------------------------------------------------------------
// Config static
//------------------------------------------------------------------------------

    atlasId: 'toolButtons',
    frameStateNames: [
        '',     //--- 0 Normal
        'Over', //--- 1 Over 
        'Down'  //--- 2 Down
    ],
    frameControlName: 'Settings',
    frameDefaultName: 'Default',
    frameExt:         '.png', 
    
//==============================================================================
// Protected
//==============================================================================

    /**
     * Initialization
     * 
     * @param {object} options  The JS object with initial class parameters
     */
    _init : function (options) {

        //--- Extend the config:
        Phaser.Utils.extend(true, this, options); // Phaser

    },

    _createButtons : function (options) {

        //--- Init the class:
        this._init(options);

        this.groupButtons = this.groupButtons || this.game.add.group();

        this._x  = 0;
        this._y  = 0;
        this._dx = this.leftSide ? 1 : -1;    

        //--- Control button:
        if (this.frameControlName) {
            this.buttons[this.frameControlName] = { onDown:function(o){ this.toolsPressed(); }.bind(this) };
        }

        for (var name in this.buttons) {
            var button       = this.buttons[name];
                button       = button || {};
                button.name  = button.name || name;
                button.state = typeof(button.state) === 'undefined' ? 1 : button.state ;
                button.x     = button.x || 0;
                button.y     = button.y || 0;
            button.own = this._addButton(button);
            button.own.owner = button;
        }

        if (this.frameControlName) {
            this._btControl = this.buttons[this.frameControlName].own;
            this._btControl._data = { state : this.initState };
        }

        this.refresh();
    },

    _setButtonState  : function (button, state) { button.state = state; this._showButtonState(button); },
    _showButtonState : function (button) {
        switch (button.state){
            case 0: // unchecked
            case false:
                button.alpha = 0.5;
                break;
            case 1: // checked
            case true:
                button.alpha  = 1; 
                break;
        }
        button._alpha = button.alpha;
    },

    _isFrameExists : function(frameName) { return this.game.cache.getFrameByName(this.atlasId, frameName) ? true : false; },
    _getFrameName  : function(frameBaseName, stateIndex) { 
        return frameBaseName + this.frameStateNames[stateIndex ? stateIndex : 0] + this.frameExt;
    },

    _addButton : function (button) {

        var frameBaseName  = button.name;
        var frameNormal    = this._getFrameName(frameBaseName);
        if (!this._isFrameExists(frameNormal)) {
            frameBaseName = this.frameDefaultName;
            frameNormal   = this._getFrameName(frameBaseName);
        }
        var frameOver = this._getFrameName(frameBaseName, 1);
            frameOver = this._isFrameExists(frameOver) ? frameOver : this._getFrameName(frameBaseName);
        var frameDown = this._getFrameName(frameBaseName, 2);
            frameDown = this._isFrameExists(frameDown) ? frameDown : this._getFrameName(frameBaseName);

        var bt = this.game.make.button(0, 0, this.atlasId, null, this, frameOver, frameNormal, frameDown);

        var   x    = this._x + button.x * this._dx,
              y    = this._y + button.y;  
        this._x   += bt.width * this._dx;
        this._w    = this._x;
        this._x   += this.xIndent * this._dx;
        var height = bt.height + button.y;
        this._h    = this._h > height ? this._h : height;

        bt.x        = x;
        bt.y        = y;
        bt.name     = button.name;
        bt.state    = button.state;
        bt.setState = function(state) { this._setButtonState(bt, state); }.bind(this);
        this.leftSide ? bt.anchor.setTo(0, 0) : bt.anchor.setTo(1, 0);
        this._showButtonState(bt);
        if (this.frameControlName && bt.name == this.frameControlName) {
            bt.alpha  = 0.5;
        }
        bt._alpha = bt.alpha;
        bt.onInputOver.add(function(o){ o.alpha = 0.75; });
        bt.onInputOut.add (function(o){ o.alpha = o._alpha; });
        //bt.onInputOver.add(function(o){ o.blendMode = PIXI.blendModes.SCREEN; });
        //bt.onInputOut.add (function(o){ o.blendMode = PIXI.blendModes.NORMAL; });
        if (typeof(button.onDown) === 'function') bt.onInputDown.add(button.onDown);
        if (typeof(button.onUp)   === 'function') bt.onInputUp.add(button.onUp);

        this.groupButtons.add(bt);

        return bt;
    },

    _applyMask : function() {
        //var bounds = this.groupButtons.getBounds();
        if (this.groupButtons.mask) this.groupButtons.mask.destroy();
        var mask = this.game.add.graphics(0, 0);
            mask.fixedToCamera = true;
            mask.beginFill(0xffffff);
        //  mask.drawRect(bounds.x, bounds.y, bounds.width*2, bounds.height);
            mask.drawRect(this._groupX, this._groupY, this._w*2, this._h);
        //--- Apply mask to the Sprite:
        this.groupButtons.mask = mask;    
    },

    _createSlideAnimations : function () {
        
        if (!this._btControl) return;

        function changeState() { this._btControl._data.state = !this._btControl._data.state; }

        var group = this._btControl.parent;
            oHide = { x: this._groupX - this._btControl.x },
            oShow = { x: this._groupX },
            delayHide  = 1000,
            delayShow  = 500,
            easingHide = Phaser.Easing.Cubic.Out,
            easingShow = Phaser.Easing.Cubic.Out; //Phaser.Easing.Elastic.Out,

        this.tweenHide = this.game.add.tween(group.cameraOffset);
        this.tweenShow = this.game.add.tween(group.cameraOffset);
        this.tweenHide.onComplete.add(changeState, this);
        this.tweenHide.to(oHide, delayHide, easingHide);
        this.tweenShow.onComplete.add(changeState, this);    
        this.tweenShow.to(oShow, delayShow, easingShow);

    },

//==============================================================================
// Public
//==============================================================================

    refresh : function () {
        //----------
        this._groupX = this.leftSide ? this.x : this.game.camera.width - this.x;
        this._groupY = this.y;
        //----------
        this.groupButtons.x = this._groupX;
        this.groupButtons.y = this._groupY;
        //--- Camera fixed:
        this.groupButtons.fixedToCamera = true;
        this.groupButtons.cameraOffset.x = this._groupX;
        this.groupButtons.cameraOffset.y = this._groupY;
        //--------------------- 
        this._createSlideAnimations();
        this._applyMask();
        if ( this._btControl && !this._btControl._data.state ) {
            this._btControl._data.state = 1;
            this.toolsPressed(); 
        }
    },      
    
    toolsPressed : function () {

        if (this._btControl) {
            this._btControl._data.state ? this.tweenHide.start() : this.tweenShow.start();
        }
        
    } 

};
//------------------------------------------------------------------------------
// Exports module values:
//------------------------------------------------------------------------------

module.exports = {
    
    /**
     * The class to inherit
     */
    theclass: ToolButtons,
    
    /**
     * The class factory
     * 
     * @param   {object} options The JS object with initial class parameters
     * @returns {object}         A new object of this class
     */
    create: function (options) { 
        return new ToolButtons(options); 
    },
    
    preload: function (game) {
        game.load.atlas('toolButtons', 'assets/sprites/controls/tools.png', 'assets/sprites/controls/tools.json');
    }
    
};



