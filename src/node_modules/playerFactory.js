/*==============================================================================
 *  Title      : The Player Factory
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 24.05.2016
 *==============================================================================
 */

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------

var instances         = {}, //--- Hash of instances
    instanceDefaultId = 'default';
    
var stateStorage      = require('stateStorage').getInstance();
    
//==============================================================================
// The Class
//==============================================================================

/**
 * Constructor
 * 
 * @param   {object} options    The JS object with initial class parameters
 * @returns {object}            A new instance of this class
 */
var __theClass = function () {
    
    //--- Player arsenal (resources):
    this.collectedGoods    = [];
    this.collectedGoodsMax = 3;
    //--- Player:
    this.player         = null;
    //--- Game:
    this.game           = null;
    //--- Tile map manager:
    this.mapManager     = null;
    //--- Events:
    this._events = [];
    
    return this;
    
};

//------------------------------------------------------------------------------
// Config
//------------------------------------------------------------------------------
    
__theClass.prototype.mass          = 100;
__theClass.prototype.gravityY      = 300;
__theClass.prototype.bounce        = 0.3;
__theClass.prototype.velocityMove  = 150;
__theClass.prototype.velocityJump  = 220;
__theClass.prototype.velocityClimb = 100;

//------------------------------------------------------------------------------
// Protected
//------------------------------------------------------------------------------

/**
 * Initialization
 * 
 * @protected
 * @param {object} options  The JS object with initial class parameters
 */
__theClass.prototype._init = function (options) {

    //--- Extend the instance:
    Phaser.Utils.extend(true, this, options);

};

__theClass.prototype._createPlayer = function() {
    
    //--- Enable the Arcade Physics system:
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    
    //--- Create the player:
    this.player = this.game.make.sprite(0, 0, 'dragon', 'stay_001.png');
    this.player.anchor.set(0.5, 1);
    
    //--- Create animations:
    this._createPlayerAnimations();
    
    //---  Enable physics on the player:
    this.game.physics.arcade.enable(this.player);
    this.player.body.bounce.y  = this.bounce;
    this.player.body.gravity.y = this.gravityY;
    this.player.body.mass      = this.mass;
    this.player.body.collideWorldBounds = true;
    this._playerSetSize();        
  
};

__theClass.prototype._playerSetSize = function() {
    this.player.body.setSize(32, 42, 7*this.player.scale.x, 0);
};

__theClass.prototype._createPlayerAnimations = function () {
    
    var animationTurn     = this.getAnimationFrames('turn', [1,2,3,4]),
        animationTurnBack = this.getAnimationFrames('turn', [4,3,2,1]);    

    this.player.animations.add('stay',      this.getAnimationFrames('stay', [1,2,3,4,5,6,7,8]), 10, true, false);
    this.player.animations.add('go',        this.getAnimationFrames('go', [1,2,3,4,5]), 10, true, false);
    this.player.animations.add('turn',     animationTurn,     10, false, false);
    this.player.animations.add('turnback', animationTurnBack, 10, false, false);
    this.player.animations.add('turnaround',this.getAnimationFrames('turn', [1,2,3,4,5,6,7,8]), 10, false, false);
    this.player.animations.add('jump',      this.getAnimationFrames('jump', [1,2,3]), 10, false, false);
    this.player.animations.add('fly',       this.getAnimationFrames('fly', [4,5,6,7,8,9]), 10, true, false);
    this.player.animations.add('fall',      this.getAnimationFrames('fall', [1,2]), 10, true, false);
    this.player.animations.add('falldown',  this.getAnimationFrames('falldown', [1,2,3,4,5]), 10, false, false);
    this.player.animations.add('climb',     this.getAnimationFrames('climb', [1,2,3,4]), 10,  true, false);
    this.player.animations.add('fire',      this.getAnimationFrames('spew', [1,2,2,2,1]), 10, false, false);
    this.player.animations.add('open', animationTurn.concat(this.getAnimationFrames('open', [1,2,1,2,1,2])).concat(animationTurnBack), 10, false, false);
    this.player.animations.add('no',        this.getAnimationFrames('no', [1,2,3,4,1,2,3,4]), 10, false, false);
    this.player.animations.add('yes',       this.getAnimationFrames('yes', [1,2,3,4]), 10, false, false);
    this.player.animations.add('oh',        this.getAnimationFrames('oh', [1,2,3,4,5,6,7,8,9,10,11,12]), 10, false, false);
    this.player.animations.add('wow',       this.getAnimationFrames('wow', [1,2,3,4,5,6,7,8,9]), 10, false, false);
    this.player.animations.add('lovely',    this.getAnimationFrames('lovely', [1,2,3,4,5,6,7,8]), 10, false, false);
    this.player.animations.add('eat',       this.getAnimationFrames('eat', [1,2,3,4,5,6,7,8]), 10, false, false);
    this.player.animations.add('get',       this.getAnimationFrames('get', [1,2,3,4,5,6,5,6,5,4,3,2,1]), 10, false, false);
    this.player.animations.add('clap',      this.getAnimationFrames('clap', [1,2,3,4,5,6,7,8,9,10,11,12,13]), 10, false, false);
    this.player.animations.add('bye',       this.getAnimationFrames('bye', [1,2,1,2,1,2,1,2,1,2]), 10, false, false);
    
};

__theClass.prototype.showAnimation = function(name, onComplete) {
            if (!this._transition) {
                this.stopMove();
                this._transition = true;
                var ani = this.player.animations.getAnimation(name);
                    ani.onComplete.addOnce(function(){  
                        this._transition = false;
                        if (typeof(onComplete) === 'function') onComplete();
                    }, this);
                    ani.play();
            }
};

__theClass.prototype.getAnimationFrames = function (baseName, numbers){
    function getZeroPrefix(index) {
        if (index<9)  return '00' + index;
        if (index<99) return '0'  + index;
    return index;    
    }
    
    if (!(numbers instanceof Array)) numbers = [numbers];
    var frames = [];
    for (var i=0; i<numbers.length; i++) {
        frames[i] = baseName + '_' + getZeroPrefix(numbers[i]) + '.png';
    }
return frames;    
};

__theClass.prototype.setPlayerXY = function (x, y) {
    this.player.x = x + this.player.width  * this.player.anchor.x * this.player.scale.x,
    this.player.y = y + this.player.height * this.player.anchor.y * this.player.scale.y;
};

__theClass.prototype.isPlayerBlockedDown = function() {
    if (
        this.player.body.blocked.down     || 
        this.player.body.wasTouching.down || 
        this.player.body.touching.down    || 
        !this.player.body.gravity.y
        ) {
        return true;
    }
    return false;
};

//--- Events -----------------------------------------------

__theClass.prototype.on = function (eventName, callback) {
    this._events[eventName] = this._events[eventName] || [];
    if (this._events[eventName].indexOf(callback) >= 0) return;
    this._events[eventName].push(callback);
};

__theClass.prototype.off = function (eventName, callback) {
    if (!this._events[eventName]) return;
    var index = this._events[eventName].indexOf(callback);
    if (this._events[eventName].indexOf(callback) >= 0)
        delete this._events[eventName][index];
};

__theClass.prototype.trigger = function (eventName, params) {
    if (!this._events[eventName]) return;
    for (var name in this._events[eventName]) {
        if (typeof(this._events[eventName][name]) === 'function') 
            this._events[eventName][name](params);
    };
};

//------------------------------------------------------------------------------
// Behavior
//------------------------------------------------------------------------------

__theClass.prototype.stopMove = function() {
    //  Stand still
    this.player.body.velocity.x = 0;
    if (this.isPlayerBlockedDown() && !this._transition) {
        this.doStay();
    }
};

__theClass.prototype.fallDown = function() {
    //  Fall
    if (!this._transition) this.player.animations.play('fall');
};

__theClass.prototype.flyUp = function() {
    //  Fly
    if (this._landed) {
        this.player.body.velocity.y = -this.velocityJump;
    }
    if (!this._transition) this.player.animations.play('fly');
};    
    
__theClass.prototype.climbUp = function() {
    if (this.arrowUpPressed && this.climbState.up) {
        this.player.body.velocity.y = -this.velocityClimb;
        if (!this._transition) this.player.animations.play('climb');
    }  else { 
        this.showAnimation('turnback', this.stopMove.bind(this)); 
    }
};
        
__theClass.prototype.climbDown = function() {
    if (this.arrowDownPressed && (this.climbState.down || !this.player.body.blocked.down)) {
        this.climbDownPressed = true;
        this.player.body.velocity.y = this.velocityClimb;
        if (!this._transition) this.player.animations.play('climb');
    } else {
        this.showAnimation('turnback', this.stopMove.bind(this)); 
    }
};        
        
__theClass.prototype.climbStop = function() {
    this.player.body.velocity.y = 0;
    if (this.player.animations.currentAnim.name === 'climb')
        this.showAnimation('turnback', this.stopMove.bind(this));
};

__theClass.prototype.move = function(direction) { //-1 =left; 1 =right
    //  Move to the left/right
    this.player.body.velocity.x = this.velocityMove * direction;
    if (this.isPlayerBlockedDown() && !this.player.body.blocked.left)
        this.doGo();
    //--- Fly & Move:
    if (this.arrowUpPressed) this.flyUp();
};

__theClass.prototype.getSomeGoods = function () {
    var tile = this.isThereSomeGoods();
    if (tile && !this.isThereSomeCover(tile.worldX, tile.worldY, tile.layer.name)) {
        if (this.collectedGoods.length == this.collectedGoodsMax) {
            //--- Can't take a goods - the arsenal is full:
            this.showAnimation('no', this.stopMove.bind(this));
            return false;
        }
        this.showAnimation('open', function() {
            //--- Save goods:
            this.collectedGoods.push( this.mapManager.removeTile(tile) ); 
            //console.log('GET the GOODS:', tile, this.collectedGoods);
            //--- Trigger event:
                if (typeof(this.onGet) === 'function') this.onGet(tile);
            //--- OK! I get it: 
            this.showAnimation('yes', this.stopMove.bind(this));
        }.bind(this));
        return true;
    }
    return false;
};

__theClass.prototype.putSomeGoods = function(goodsTile) {
    var tile = this.isThereSomeGoods();
    if (tile || this.collectedGoods.length == 0) return false;
    //-------------------------
    var goodsIndex = goodsTile ? this.collectedGoods.indexOf(goodsTile) : -1;
    if (goodsIndex > -1) { 
        tile = this.collectedGoods.splice(goodsIndex, 1);
    } else {
        tile = this.collectedGoods.pop();
    }
    var newTile  = this.mapManager.addTile(tile, this.player.x, this.player.bottom-1);
    //console.log( 'PUT the GOODS:', this.collectedGoods, newTile); 
    //--- Trigger event:
        if (typeof(this.onPut) === 'function') this.onPut(tile);
    //-------------------------
    return true;
};

__theClass.prototype.openDoor = function(door) {
    //--- Open the door:
    var cover_layer = door.properties ? door.properties['cover_layer'] : null;
    //--- Clear cover layer:
    if (cover_layer) {
        var map = this.mapManager.map,
            ix = door.width / map.tileWidth,
            iy = door.height / map.tileHeight;
        for (var i=0; i<ix; i++) {
            for (var j=0; j<iy; j++) {
            var tile = map.getTileWorldXY(door.x + i*map.tileWidth, door.y + j*map.tileHeight, map.tileWidth, map.tileHeight, cover_layer);
                if (tile) {
                    //--- Clear tile:
                    this.mapManager.removeTile(tile);
                }
            }
        }
    }
    //--- Save state:
    stateStorage.save(door);
    //--- Delete the lock:
    delete door.properties.lock;
};

__theClass.prototype.openRelatedDoor = function () {
    var door   = this.isThereSomeDoor();
    if (door && door.properties && !door.properties.lock) this.openDoor(door);
};

__theClass.prototype.comeIn = function (door) {
    
    if (door.properties && door.properties.gate_target) {
        
            var gate_target = door.properties.gate_target.split(':'),
                gateName = gate_target[0],
                mapName  = gate_target[1],
                sceneName= gate_target[2];
        
            //--- Gate between scenes:
            if (sceneName) {
                this.showAnimation('turn', function() {
                    this.game.extentions.sceneManager.next(sceneName, mapName, gateName);
                }.bind(this));
            return true;
            }
        
            //--- Gate between maps:
            if (mapName) {
                this.showAnimation('turn', function() {
                    this.mapManager.createMap(mapName);
                    var x = this.mapManager.startPoint.x,
                        y = this.mapManager.startPoint.y;
                    if (gateName) {
                        var target = this.mapManager.objects.doors[gateName];
                        if (target) {
                            x = target.x;
                            y = target.y;
                        } 
                    }
                    this.showPlayer(x, y, 'turnback');
                    this.openRelatedDoor();
                }.bind(this));
            return true;
            }
            
            //--- Local gate:
            if (this.mapManager.objects.doors[gateName]) {
                var target = this.mapManager.objects.doors[gateName];
                this.showAnimation('turn', function() {
                    this.showPlayer(target.x, target.y, 'turnback');
                    this.openRelatedDoor();
                }.bind(this));
            return true;
            }
            
    }
    
    return false;        
};       
       
__theClass.prototype.getPrize = function(sprite) { //console.log('Here is a prize');
    if (typeof(sprite.parentMapLayer) == 'undefined' || !this.isThereSomeCover(sprite.x, sprite.y, sprite.parentMapLayer)) {
        console.log('I GET the PRIZE:', sprite);
        stateStorage.save(sprite);
        sprite.destroy();
        //if (tile.index === 61)
        //    this.changeTile(tile, 62); // change
        //else 
        //    this.removeTile(tile);      // destroy
        //return false;
    }
};        
        
//------------------------------------------------------------------------------
// Commands
//------------------------------------------------------------------------------
        
__theClass.prototype.doStay = function() {
    //  Stand still
    if (!this._transition) this.player.animations.play('stay');
    //this.player.animations.stop();
    //this.player.frame = 4;
};   

__theClass.prototype.doGo = function() {
    //  Go
    if (!this._transition) this.player.animations.play('go');
};

__theClass.prototype.doFire = function() {
    //  Fire
    //if (!this._transition) this.player.animations.play('fire');
    this.showAnimation('fire', function(){
        if (this.isPlayerBlockedDown()) {
            this.doStay();
        }
    }.bind(this));
};

__theClass.prototype.doJumpOrClimbUp = function() {
    
    if (this._landed && !this._transition) {
        if (this.climbState.up) {
            //--- Align to center X of stair:
            this.player.x = this.climbState.up.xCenter;
            //this.player.y;
            //--- Climb up ---
            if (this.player.animations.currentAnim.name !== 'climb') {
                //--- First need to turn:
                this.showAnimation('turn', function() {
                    this.climbUp();
                }.bind(this));
            } else {
                this.climbUp();
            }
            //----------------
        } else {
            //--- Jump & Fly ---
            this._transition = true;
            var ani = this.player.animations.getAnimation('jump');
                ani.onComplete.addOnce(function(){
                    this._transition = false;
                    this.flyUp();
                    //--- Fly & Move:
                    if (this.arrowLeftPressed && this.player.body.velocity.x === 0) this.actionLeft();
                    if (this.arrowRightPressed && this.player.body.velocity.x === 0) this.actionRight();
                    //---
                }, this);
                ani.play();
            //--------------------
        }
    }    
    
};

__theClass.prototype.doClimbDown = function() {
    if (this.climbState.down || !this.player.body.blocked.down) {
        //--- Align to center X of stair:
        if (this.climbState.down)
            this.player.x = this.climbState.down.xCenter;
        //--- Climb Down ---
        if (this.player.animations.currentAnim.name !== 'climb') {
            //--- First need to turn:
            this.showAnimation('turn', function() {
                this.climbDown();
            }.bind(this));
        } else {
            this.climbDown();
        }
        //----------------
    }
};

__theClass.prototype.doMove = function(direction) { //-1 =left; 1 =right
    if (this._transition) return;
    if (this.player.scale.x !== direction) {
        var currentAnimName = this.player.animations.currentAnim.name; // save current animation
        this.stopMove();
        this._transition = true;
        var ani = this.player.animations.getAnimation('turnaround');
            ani.onComplete.addOnce(function(){
                this._transition = false;
                this.player.animations.getAnimation(currentAnimName).play(); // restore current animation after rotate
                this.player.scale.set(direction, 1);
                this._playerSetSize();
                if ((direction == -1 && this.arrowLeftPressed) || (direction == 1 && this.arrowRightPressed) )
                    this.move(direction);
                else 
                    this.stopMove();
            }, this);
            ani.play();
    } else {
        this.move(direction);
    }
};
        
__theClass.prototype.doGetOpen = function() {

    //--- Get some goods:
    if (this.getSomeGoods()) return;

    //--- Try to open the door:
    var door   = this.isThereSomeDoor(),
        opened = false;
    if (door) {
        if (door.properties && typeof(door.properties.lock) != 'undefined') {
            if (door.properties.lock == '') {
                //--- Just open:
                this.doDoorOpen(door);
                return ;
            } else {
                //--- Need the key:
                for (var i in this.collectedGoods) {
                    if (this.collectedGoods[i].properties && this.collectedGoods[i].properties.name == door.properties.lock) {
                        //--- Open the door:
                        this.doDoorOpen(door);
                        return ;
                    }
                }
            }
        } else {
            opened = true;
        }
    }

    //--- Come in:
    if (opened && this.comeIn(door)) return;

    //--- Sorry, I can't...
    this.showAnimation('no', this.stopMove.bind(this));
};
        
__theClass.prototype.doDoorOpen = function(door) {
    //--- Open the door:
    this.showAnimation('open', function() { 
        this.openDoor(door);
        //--- OK! It's opened:
        this.showAnimation('yes', this.stopMove.bind(this));
    }.bind(this));
};        
  
__theClass.prototype.doPut = function(goodsTile) {
    //--- Put:
    this.showAnimation('turn', function() { 
        if (this.putSomeGoods(goodsTile)) {
            //--- OK:
            this.showAnimation('turnback', this.stopMove.bind(this));
        } else {
            //--- Fail:
            this.showAnimation('turnback', function(){ this.showAnimation('no', this.stopMove.bind(this)); }.bind(this));
        }
    }.bind(this));
};  
  
__theClass.prototype.doTest = function() {
    //  For test
    if (this.isPlayerBlockedDown()) {
        this.showAnimation('wow', this.stopMove.bind(this));
        //this.showAnimation('oh', this.stopMove.bind(this));
        //this.showAnimation('eat', function(){ this.showAnimation('lovely', this.stopMove.bind(this)) }.bind(this));
        //this.showAnimation('bye', this.stopMove.bind(this));
        //this.showAnimation('clap', this.stopMove.bind(this));
        //this.showAnimation('get', this.stopMove.bind(this));
        //this.showAnimation('falldown', this.stopMove.bind(this));
        //this.showAnimation('turn', function(){ this.showAnimation('climb', function(){ this.showAnimation('turnback', this.stopMove.bind(this)); }.bind(this)) }.bind(this));
    }
}; 

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

__theClass.prototype.getTileCenterX   = function(tile) { return tile.worldX + tile.width/2; };
__theClass.prototype.getPlayerDeltaX  = function(x)    { return Math.abs(x - this.player.x - this.player.scale.x*5); };
__theClass.prototype.getClimbPosition = function(tile) {
    var centerX  = this.getTileCenterX(tile);
    if (this.getPlayerDeltaX(centerX) < 11) {
        return {
            x      : tile.worldX, 
            xCenter: centerX,
            y      : tile.worldY
        };
    };
return false;    
};
__theClass.prototype.isStair = function(direction) {
    var layers = this.mapManager.layers;
    for (var i in layers.stairs) {
        var  map  = this.mapManager.map,
             tile = map.getTileWorldXY(this.player.x, this.player.bottom + 1*direction, map.tileWidth, map.tileHeight, layers.stairs[i].index);
        if (tile) {
            return this.getClimbPosition(tile);
            break;
        }
    }
    return false;
};
__theClass.prototype.canClimb = function() { 
    return { up:this.isStair(-1), down:this.isStair(1) };
};

/**
 * Find goods in the current position
 * 
 * @returns {scene.prototype.isThereSomeGoods.tile|Boolean}
 */
__theClass.prototype.isThereSomeGoods = function() {
    var map    = this.mapManager.map,
        layers = this.mapManager.layers;
    for (var i in layers.goods) {
        var tile = map.getTileWorldXY(this.player.x, this.player.bottom - 1, map.tileWidth, map.tileHeight, layers.goods[i].index);
        if (tile) {
            return tile;
            break;
        }
    }
    return false;
};
        
/**
 * Find a door in the current position
 * 
 * @returns {Boolean}
 */
__theClass.prototype.isThereSomeDoor = function() {
    for (var name in this.mapManager.objects.doors) {
    var gate = this.mapManager.objects.doors[name],
        x2   = gate.x + gate.width,
        y2   = gate.y + gate.height,
        px   = this.player.left + this.player.width/2,
        py   = this.player.top  + this.player.height/2;
        if (px > gate.x && px < x2 && py > gate.y && py < y2)
            return gate;
    }
    return false;
};

/**
 * Find a cover of the current position ( DUPLICATED??? )
 * 
 * @returns {Boolean}
 */
__theClass.prototype.isThereSomeCover = function(x, y, layerName) {
    var map        = this.mapManager.map,
        layerIndex = map.getLayerIndex(layerName);
    for (var i=layerIndex+1; i<map.layers.length; i++) {
        var tile = map.getTileWorldXY(x, y, map.tileWidth, map.tileHeight, i);
        if (tile) { //console.log('cover:', tile);
            return tile;
            break;
        }
    }
    return false;            
};
      
    
//==============================================================================
// Public
//==============================================================================

//------------------------------------------------------------------------------
// Actions (controllers)
//------------------------------------------------------------------------------

__theClass.prototype.actionUp = function() {
    //  Jump & Fly || Climb up
    this.arrowUpPressed = true;
    this.doJumpOrClimbUp();
};

__theClass.prototype.actionUpRelease = function() {
    this.arrowUpPressed = false;
    this.climbStop();
};
        
__theClass.prototype.actionDown = function() {
    this.arrowDownPressed = true;
    this.doClimbDown();
};

__theClass.prototype.actionDownRelease = function() {
    this.arrowDownPressed = false;
    this.climbDownPressed = false;
    this.climbStop();
};

__theClass.prototype.actionLeft = function() {
    this.arrowLeftPressed = true;
    this.doMove(-1);
};

__theClass.prototype.actionLeftRelease = function() {
    this.arrowLeftPressed = false;
    if (!this._transition) this.stopMove();
};

__theClass.prototype.actionRight = function() {
    this.arrowRightPressed = true;
    this.doMove(1);
};

__theClass.prototype.actionRightRelease = function() {
    this.arrowRightPressed = false;
    if (!this._transition) this.stopMove();
};

__theClass.prototype.actionSpace = function() {
    this.doFire();
    //console.log('Fire');
};

__theClass.prototype.actionA = function() {
    this.doGetOpen();
    //console.log('A');
};

__theClass.prototype.actionB = function() {
    this.doPut()
    //this.doTest();
    //console.log('B');
};

//------------------------------------------------------------------------------
// Scene main methods
//------------------------------------------------------------------------------

__theClass.prototype.preload = function (game) {
    
    this.game = game;
    game.load.atlas('dragon',  'assets/sprites/dragon/dragon.png', 'assets/sprites/dragon/dragon.json');
    
};

__theClass.prototype.create = function (x, y, options) {
    
    //--- Init:
    this._init(options);
    
    //--- Create the player:
    this._createPlayer();
    
    //--- Add player to the world:
    this.game.world.add(this.player);
    
    //--- First show:
    this.showPlayer(x, y);
    
};

__theClass.prototype.showPlayer = function (x, y, animationName) {
    this.setPlayerXY(x, y);
    this.player.bringToTop();
    if (typeof(animationName) !== 'string') animationName = 'stay';
    if (animationName) {
        //this.showAnimation(animationName);//, this.stopMove.bind(this));
        this.player.animations.play(animationName);
    }
};

__theClass.prototype.update = function () {
    
    var layers = this.mapManager.layers,
        prizes = this.mapManager.prizes,
        blocks = this.mapManager.blocks;
    
    //--- Collide the player and the platforms:
    for (var i in layers.platforms)
        this.game.physics.arcade.collide(this.player, layers.platforms[i], function(player, layer) {}, null, this); //platforms
    //--- Collide the player and the stairs:
    for (var i in layers.stairs)
        this.game.physics.arcade.collide(this.player, layers.stairs[i], function(player, layer) {}, null, this); //stairs
    //--- Collide the player and prizes:
    this.game.physics.arcade.overlap(this.player, prizes, function(player, prize) { this.getPrize(prize); return false; }, null, this); //prizes
    //--- Collide the player and blocks:
    this.game.physics.arcade.collide(this.player, blocks,
        function(player, block) {
            if (player.body.velocity.x > 0 && player.body.touching.right) { 
                player.body.velocity.x = this.velocityMove;
            } else 
            if (player.body.velocity.x < 0 && player.body.touching.left) {
                player.body.velocity.x = -this.velocityMove;
            }
            block.body.velocity.x = 0;
            //--- Save block state:
            stateStorage.save(block);
        },
        null,
        this
    );
    //--------------------
    
    //--- Flying & Falling:
    if (!this.isPlayerBlockedDown()) {
        this._landed = false; // leave the ground
        if (this.player.body.velocity.y > 0) {
            //--- Falling:
            //console.log('Falling:', this.player.body.velocity.y, this.player.body.wasTouching.down, this.player.body.touching.down);
            if (this.player.body.velocity.y > 100) { //--- Hide bounce: (%!!!)
                if (this.arrowUpPressed) {
                    this.flyUp();
                } else {
                    this.fallDown();
                }
            }
        } else {
            //--- Flying:
            //console.log('Flying:', this.player.body.velocity.y, this.player.body.wasTouching.down, this.player.body.touching.down);
        }
    }

    //--- Landidng:
    if (this.isPlayerBlockedDown() && !this._landed) {
        this._landed = true;
        //console.log('Landed:', this.player.body.velocity.y, this.player.body.touching.down, this.player.body.wasTouching.down);
        if (this.player.body.velocity.x === 0) {
            this.doStay();
        } else {
            this.doGo();
        }
    }

    //--- Climbing:
    this.climbState = this.canClimb();

    if (this.climbState.up || this.climbState.down) {
        if (this.player.body.gravity.y) {
            //--- Disable gravity:
            this.player.body.velocity.y = 0;
            this.player.body.bounce.y   = 0;
            this.player.body.gravity.y  = 0;
            //--- Align by Y:
            if (this.climbState.down && (this.player.y - this.climbState.down.y < 3)) {
                this.player.body.prev.x = this.player.body.x;
                this.player.body.prev.y = this.player.body.y;
                this.player.y = this.climbState.down.y;
            }
            //console.log('ready to climb: ', this.player.y, this.climbState.down.y);
        }
    } else {
        if (this.player.body.gravity.y === 0) {
            //console.log('restore gravity');
            //--- Restore gravity:
            if (this.player.animations.currentAnim.name === 'climb') {
                this.player.body.velocity.y = 0;
            }
            this.player.body.gravity.y  = this.gravityY;
            this.player.body.bounce.y   = this.bounce;
            if (this.player.animations.currentAnim.name === 'climb') {
                this.showAnimation('turnback', this.stopMove.bind(this));
            }
        }
    }
            
};

//==============================================================================
// Exports module values:
//==============================================================================

module.exports = {
    
    /**
     * The class to inherit
     * 
     * example:
     * 
     * function childClass() {
     *      theclass.apply(this, arguments);
     * }
     * 
     * childClass.prototype = Object.create(theclass.prototype);
     * childClass.prototype.constructor = childClass;
     * 
     */
    theclass: __theClass,
    
    /**
     * The class factory
     * 
     * @param   {object} options The JS object with initial class parameters
     * @returns {object}         A new instance of this class
     */
    create: function (id) {
        
        if (!id) id = instanceDefaultId;
        if (!instances[id]) {
             instances[id]    = new __theClass();
             instances[id].id = id;
        }
        
        return instances[id];
        
    },
    
    getInstances: function() { return instances;  }

};