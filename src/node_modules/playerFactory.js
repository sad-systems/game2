/*==============================================================================
 *  Title      : The Player Factory
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 24.05.2016
 *==============================================================================
 */

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------

var instances         = {}, //--- Hash of instances
    instanceDefaultId = 'default';
    
//==============================================================================
// The Class
//==============================================================================

/**
 * Constructor
 * 
 * @param   {object} options    The JS object with initial class parameters
 * @returns {object}            A new instance of this class
 */
var __theClass = function (options) {

    this._init(options);
    return this;
    
};

//------------------------------------------------------------------------------
// Config
//------------------------------------------------------------------------------

__theClass.prototype.game          = null;
__theClass.prototype.player        = null;
__theClass.prototype.mass          = 100;
__theClass.prototype.gravityY      = 300;
__theClass.prototype.bounce        = 0.3;
__theClass.prototype.velocityMove  = 150;
__theClass.prototype.velocityJump  = -220;
__theClass.prototype.velocityClimb = -100;

//------------------------------------------------------------------------------
// Protected
//------------------------------------------------------------------------------

/**
 * Initialization
 * 
 * @protected
 * @param {object} options  The JS object with initial class parameters
 */
__theClass.prototype._init = function (options) {

    //--- Extend the instance:
    Phaser.Utils.extend(true, this, options);

};

__theClass.prototype._createPlayer = function() {
    
    //--- Create the player:
    this.player = this.game.make.sprite(0, 0, 'dragon', 'stay_001.png');
    this.player.anchor.set(0.5, 1);
    
    //--- Create animations:
    this._createPlayerAnimations();
    
    //---  Enable physics on the player:
    this.game.physics.arcade.enable(this.player);
    this.player.body.bounce.y  = this.bounce;
    this.player.body.gravity.y = this.gravityY;
    this.player.body.mass      = this.mass;
    this.player.body.collideWorldBounds = true;
    this._playerSetSize();        
  
};

__theClass.prototype._playerSetSize = function() {
    this.player.body.setSize(32, 42, 7*this.player.scale.x, 0);
};

__theClass.prototype._createPlayerAnimations = function () {
    
    var animationTurn     = this.getAnimationFrames('turn', [1,2,3,4]),
        animationTurnBack = this.getAnimationFrames('turn', [4,3,2,1]);    

    this.player.animations.add('stay',      this.getAnimationFrames('stay', [1,2,3,4,5,6,7,8]), 10, true, false);
    this.player.animations.add('go',        this.getAnimationFrames('go', [1,2,3,4,5]), 10, true, false);
    this.player.animations.add('turn',     animationTurn,     10, false, false);
    this.player.animations.add('turnback', animationTurnBack, 10, false, false);
    this.player.animations.add('turnaround',this.getAnimationFrames('turn', [1,2,3,4,5,6,7,8]), 10, false, false);
    this.player.animations.add('jump',      this.getAnimationFrames('jump', [1,2,3]), 10, false, false);
    this.player.animations.add('fly',       this.getAnimationFrames('fly', [4,5,6,7,8,9]), 10, true, false);
    this.player.animations.add('fall',      this.getAnimationFrames('fall', [1,2]), 10, true, false);
    this.player.animations.add('falldown',  this.getAnimationFrames('falldown', [1,2,3,4,5]), 10, false, false);
    this.player.animations.add('climb',     this.getAnimationFrames('climb', [1,2,3,4]), 10,  true, false);
    this.player.animations.add('fire',      this.getAnimationFrames('spew', [1,2,2,2,1]), 10, false, false);
    this.player.animations.add('open', animationTurn.concat(this.getAnimationFrames('open', [1,2,1,2,1,2])).concat(animationTurnBack), 10, false, false);
    this.player.animations.add('no',        this.getAnimationFrames('no', [1,2,3,4,1,2,3,4]), 10, false, false);
    this.player.animations.add('yes',       this.getAnimationFrames('yes', [1,2,3,4]), 10, false, false);
    this.player.animations.add('oh',        this.getAnimationFrames('oh', [1,2,3,4,5,6,7,8,9,10,11,12]), 10, false, false);
    this.player.animations.add('wow',       this.getAnimationFrames('wow', [1,2,3,4,5,6,7,8,9]), 10, false, false);
    this.player.animations.add('lovely',    this.getAnimationFrames('lovely', [1,2,3,4,5,6,7,8]), 10, false, false);
    this.player.animations.add('eat',       this.getAnimationFrames('eat', [1,2,3,4,5,6,7,8]), 10, false, false);
    this.player.animations.add('get',       this.getAnimationFrames('get', [1,2,3,4,5,6,5,6,5,4,3,2,1]), 10, false, false);
    this.player.animations.add('clap',      this.getAnimationFrames('clap', [1,2,3,4,5,6,7,8,9,10,11,12,13]), 10, false, false);
    this.player.animations.add('bye',       this.getAnimationFrames('bye', [1,2,1,2,1,2,1,2,1,2]), 10, false, false);
    
};

__theClass.prototype.getAnimationFrames = function (baseName, numbers){
    function getZeroPrefix(index) {
        if (index<9)  return '00' + index;
        if (index<99) return '0'  + index;
    return index;    
    }
    
    if (!(numbers instanceof Array)) numbers = [numbers];
    var frames = [];
    for (var i=0; i<numbers.length; i++) {
        frames[i] = baseName + '_' + getZeroPrefix(numbers[i]) + '.png';
    }
return frames;    
};

__theClass.prototype.setPlayerXY = function (x, y) {
    this.player.x = x + this.player.width  * this.player.anchor.x * this.player.scale.x,
    this.player.y = y + this.player.height * this.player.anchor.y * this.player.scale.y;
};

__theClass.prototype.isPlayerBlockedDown = function() {
    if (
        this.player.body.blocked.down     || 
        this.player.body.wasTouching.down || 
        this.player.body.touching.down    || 
        !this.player.body.gravity.y
        ) {
        return true;
    }
    return false;
};

//------------------------------------------------------------------------------
// Public
//------------------------------------------------------------------------------


__theClass.prototype.preload = function () {
    
    this.game.load.atlas('dragon',  'assets/sprites/dragon/dragon.png', 'assets/sprites/dragon/dragon.json');
    
};

__theClass.prototype.create = function (x, y) {
    
    this._createPlayer();
    
    //--- Add to the world:
    this.game.world.add(this.player);
    
    //--- First show:
    this.setPlayerXY(x, y);
    this.player.animations.play('stay');
    
};

__theClass.prototype.update = function () {

};

//==============================================================================
// Exports module values:
//==============================================================================

module.exports = {
    
    /**
     * The class to inherit
     * 
     * example:
     * 
     * function childClass() {
     *      theclass.apply(this, arguments);
     * }
     * 
     * childClass.prototype = Object.create(theclass.prototype);
     * childClass.prototype.constructor = childClass;
     * 
     */
    theclass: __theClass,
    
    /**
     * The class factory
     * 
     * @param   {object} options The JS object with initial class parameters
     * @returns {object}         A new instance of this class
     */
    create: function (options, id) {
        
        if (!id) id = instanceDefaultId;
        if (!instances[id]) {
             instances[id]    = new __theClass(options);
             instances[id].id = id;
        } else {
             instances[id]._init(options);
        }
        return instances[id];
        
    },
    
    getInstances: function() { return instances;  }

};