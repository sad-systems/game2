/*==============================================================================
 *  Title      : The Player Factory
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 24.05.2016
 *==============================================================================
 */

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------

var instances         = {}, //--- Hash of instances
    instanceDefaultId = 'default';
    
//==============================================================================
// The Class
//==============================================================================

/**
 * Constructor
 * 
 * @param   {object} options    The JS object with initial class parameters
 * @returns {object}            A new instance of this class
 */
var __theClass = function () {
    
    //--- Player arsenal (resources):
    this.collectedGoods = [];
    //--- Player:
    this.player         = null;
    
    return this;
    
};

//------------------------------------------------------------------------------
// Config
//------------------------------------------------------------------------------

__theClass.prototype.game          = null;
__theClass.prototype.map           = null;
    __theClass.prototype.objects = null; // ???
    __theClass.prototype.layers  = null; // ???
__theClass.prototype.mass          = 100;
__theClass.prototype.gravityY      = 300;
__theClass.prototype.bounce        = 0.3;
__theClass.prototype.velocityMove  = 150;
__theClass.prototype.velocityJump  = 220;
__theClass.prototype.velocityClimb = 100;

//------------------------------------------------------------------------------
// Protected
//------------------------------------------------------------------------------

/**
 * Initialization
 * 
 * @protected
 * @param {object} options  The JS object with initial class parameters
 */
__theClass.prototype._init = function (options) {

    //--- Extend the instance:
    Phaser.Utils.extend(true, this, options);

};

__theClass.prototype._createPlayer = function() {
    
    //--- Create the player:
    this.player = this.game.make.sprite(0, 0, 'dragon', 'stay_001.png');
    this.player.anchor.set(0.5, 1);
    
    //--- Create animations:
    this._createPlayerAnimations();
    
    //---  Enable physics on the player:
    this.game.physics.arcade.enable(this.player);
    this.player.body.bounce.y  = this.bounce;
    this.player.body.gravity.y = this.gravityY;
    this.player.body.mass      = this.mass;
    this.player.body.collideWorldBounds = true;
    this._playerSetSize();        
  
};

__theClass.prototype._playerSetSize = function() {
    this.player.body.setSize(32, 42, 7*this.player.scale.x, 0);
};

__theClass.prototype._createPlayerAnimations = function () {
    
    var animationTurn     = this.getAnimationFrames('turn', [1,2,3,4]),
        animationTurnBack = this.getAnimationFrames('turn', [4,3,2,1]);    

    this.player.animations.add('stay',      this.getAnimationFrames('stay', [1,2,3,4,5,6,7,8]), 10, true, false);
    this.player.animations.add('go',        this.getAnimationFrames('go', [1,2,3,4,5]), 10, true, false);
    this.player.animations.add('turn',     animationTurn,     10, false, false);
    this.player.animations.add('turnback', animationTurnBack, 10, false, false);
    this.player.animations.add('turnaround',this.getAnimationFrames('turn', [1,2,3,4,5,6,7,8]), 10, false, false);
    this.player.animations.add('jump',      this.getAnimationFrames('jump', [1,2,3]), 10, false, false);
    this.player.animations.add('fly',       this.getAnimationFrames('fly', [4,5,6,7,8,9]), 10, true, false);
    this.player.animations.add('fall',      this.getAnimationFrames('fall', [1,2]), 10, true, false);
    this.player.animations.add('falldown',  this.getAnimationFrames('falldown', [1,2,3,4,5]), 10, false, false);
    this.player.animations.add('climb',     this.getAnimationFrames('climb', [1,2,3,4]), 10,  true, false);
    this.player.animations.add('fire',      this.getAnimationFrames('spew', [1,2,2,2,1]), 10, false, false);
    this.player.animations.add('open', animationTurn.concat(this.getAnimationFrames('open', [1,2,1,2,1,2])).concat(animationTurnBack), 10, false, false);
    this.player.animations.add('no',        this.getAnimationFrames('no', [1,2,3,4,1,2,3,4]), 10, false, false);
    this.player.animations.add('yes',       this.getAnimationFrames('yes', [1,2,3,4]), 10, false, false);
    this.player.animations.add('oh',        this.getAnimationFrames('oh', [1,2,3,4,5,6,7,8,9,10,11,12]), 10, false, false);
    this.player.animations.add('wow',       this.getAnimationFrames('wow', [1,2,3,4,5,6,7,8,9]), 10, false, false);
    this.player.animations.add('lovely',    this.getAnimationFrames('lovely', [1,2,3,4,5,6,7,8]), 10, false, false);
    this.player.animations.add('eat',       this.getAnimationFrames('eat', [1,2,3,4,5,6,7,8]), 10, false, false);
    this.player.animations.add('get',       this.getAnimationFrames('get', [1,2,3,4,5,6,5,6,5,4,3,2,1]), 10, false, false);
    this.player.animations.add('clap',      this.getAnimationFrames('clap', [1,2,3,4,5,6,7,8,9,10,11,12,13]), 10, false, false);
    this.player.animations.add('bye',       this.getAnimationFrames('bye', [1,2,1,2,1,2,1,2,1,2]), 10, false, false);
    
};

__theClass.prototype.showAnimation = function(name, onComplete) {
            if (!this._transition) {
                this.stopMove();
                this._transition = true;
                var ani = this.player.animations.getAnimation(name);
                    ani.onComplete.addOnce(function(){  
                        this._transition = false;
                        if (typeof(onComplete) === 'function') onComplete();
                    }, this);
                    ani.play();
            }
};

__theClass.prototype.getAnimationFrames = function (baseName, numbers){
    function getZeroPrefix(index) {
        if (index<9)  return '00' + index;
        if (index<99) return '0'  + index;
    return index;    
    }
    
    if (!(numbers instanceof Array)) numbers = [numbers];
    var frames = [];
    for (var i=0; i<numbers.length; i++) {
        frames[i] = baseName + '_' + getZeroPrefix(numbers[i]) + '.png';
    }
return frames;    
};

__theClass.prototype.setPlayerXY = function (x, y) {
    this.player.x = x + this.player.width  * this.player.anchor.x * this.player.scale.x,
    this.player.y = y + this.player.height * this.player.anchor.y * this.player.scale.y;
};

__theClass.prototype.isPlayerBlockedDown = function() {
    if (
        this.player.body.blocked.down     || 
        this.player.body.wasTouching.down || 
        this.player.body.touching.down    || 
        !this.player.body.gravity.y
        ) {
        return true;
    }
    return false;
};

//------------------------------------------------------------------------------
// Behavior
//------------------------------------------------------------------------------

__theClass.prototype.stopMove = function() {
    //  Stand still
    this.player.body.velocity.x = 0;
    if (this.isPlayerBlockedDown() && !this._transition) {
        this.doStay();
    }
};

__theClass.prototype.fallDown = function() {
    //  Fall
    if (!this._transition) this.player.animations.play('fall');
};

__theClass.prototype.flyUp = function() {
    //  Fly
    if (this._landed) {
        this.player.body.velocity.y = -this.velocityJump;
    }
    if (!this._transition) this.player.animations.play('fly');
};    
    
__theClass.prototype.climbUp = function() {
    if (this.arrowUpPressed && this.climbState.up) {
        this.player.body.velocity.y = -this.velocityClimb;
        if (!this._transition) this.player.animations.play('climb');
    }  else { 
        this.showAnimation('turnback', this.stopMove.bind(this)); 
    }
};
        
__theClass.prototype.climbDown = function() {
    if (this.arrowDownPressed && (this.climbState.down || !this.player.body.blocked.down)) {
        this.climbDownPressed = true;
        this.player.body.velocity.y = this.velocityClimb;
        if (!this._transition) this.player.animations.play('climb');
    } else {
        this.showAnimation('turnback', this.stopMove.bind(this)); 
    }
};        
        
__theClass.prototype.climbStop = function() {
    this.player.body.velocity.y = 0;
    if (this.player.animations.currentAnim.name === 'climb')
        this.showAnimation('turnback', this.stopMove.bind(this));
};

__theClass.prototype.move = function(direction) { //-1 =left; 1 =right
    //  Move to the left/right
    this.player.body.velocity.x = this.velocityMove * direction;
    if (this.isPlayerBlockedDown() && !this.player.body.blocked.left)
        this.doGo();
    //--- Fly & Move:
    if (this.arrowUpPressed) this.flyUp();
};

__theClass.prototype.doorOpen = function(door) {
    //--- Open the door:
    this.showAnimation('open', function() {
        var cover_layer = door.properties ? door.properties['cover_layer'] : null;
        //--- Clear cover layer:
        if (cover_layer) {
            var ix = door.width / this.map.tileWidth,
                iy = door.height / this.map.tileHeight;
            for (var i=0; i<ix; i++) {
                for (var j=0; j<iy; j++) {
                var tile = this.map.getTileWorldXY(door.x + i*this.map.tileWidth, door.y + j*this.map.tileHeight, this.map.tileWidth, this.map.tileHeight, cover_layer);
                    if (tile) {
                        tile.index = -1;
                        tile.layer.dirty = true;
                    }
                }
            }
        }
        //--- Delete the lock:
        delete door.properties.lock;
        //--- OK! It's opened:
        this.showAnimation('yes', this.stopMove.bind(this));
        //--------------------
    }.bind(this));
};
        
__theClass.prototype.getPrize = function(sprite) { //console.log('Here is a prize');
    if (typeof(sprite.parentMapLayer) == 'undefined' || !this.isThereSomeCover(sprite.x, sprite.y, sprite.parentMapLayer)) {
        console.log('I GET the PRIZE:', sprite);
        sprite.destroy();
        //if (tile.index === 61)
        //    this.changeTile(tile, 62); // change
        //else 
        //    this.clearTile(tile);      // destroy
        //return false;
    }
};        
        
//------------------------------------------------------------------------------
// Commands
//------------------------------------------------------------------------------
        
__theClass.prototype.doStay = function() {
    //  Stand still
    if (!this._transition) this.player.animations.play('stay');
    //this.player.animations.stop();
    //this.player.frame = 4;
};   

__theClass.prototype.doGo = function() {
    //  Go
    if (!this._transition) this.player.animations.play('go');
};

__theClass.prototype.doFire = function() {
    //  Fire
    //if (!this._transition) this.player.animations.play('fire');
    this.showAnimation('fire', function(){
        if (this.isPlayerBlockedDown()) {
            this.doStay();
        }
    }.bind(this));
};

__theClass.prototype.doJumpOrClimbUp = function() {
    
    if (this._landed && !this._transition) {
        if (this.climbState.up) {
            //--- Align to center X of stair:
            this.player.x = this.climbState.up.xCenter;
            //this.player.y;
            //--- Climb up ---
            if (this.player.animations.currentAnim.name !== 'climb') {
                //--- First need to turn:
                this.showAnimation('turn', function() {
                    this.climbUp();
                }.bind(this));
            } else {
                this.climbUp();
            }
            //----------------
        } else {
            //--- Jump & Fly ---
            this._transition = true;
            var ani = this.player.animations.getAnimation('jump');
                ani.onComplete.addOnce(function(){
                    this._transition = false;
                    this.flyUp();
                    //--- Fly & Move:
                    if (this.arrowLeftPressed && this.player.body.velocity.x === 0) this.actionLeft();
                    if (this.arrowRightPressed && this.player.body.velocity.x === 0) this.actionRight();
                    //---
                }, this);
                ani.play();
            //--------------------
        }
    }    
    
};

__theClass.prototype.doClimbDown = function() {
    if (this.climbState.down || !this.player.body.blocked.down) {
        //--- Align to center X of stair:
        if (this.climbState.down)
            this.player.x = this.climbState.down.xCenter;
        //--- Climb Down ---
        if (this.player.animations.currentAnim.name !== 'climb') {
            //--- First need to turn:
            this.showAnimation('turn', function() {
                this.climbDown();
            }.bind(this));
        } else {
            this.climbDown();
        }
        //----------------
    }
};

__theClass.prototype.doMove = function(direction) { //-1 =left; 1 =right
    if (this._transition) return;
    if (this.player.scale.x !== direction) {
        var currentAnimName = this.player.animations.currentAnim.name; // save current animation
        this.stopMove();
        this._transition = true;
        var ani = this.player.animations.getAnimation('turnaround');
            ani.onComplete.addOnce(function(){
                this._transition = false;
                this.player.animations.getAnimation(currentAnimName).play(); // restore current animation after rotate
                this.player.scale.set(direction, 1);
                this._playerSetSize();
                if ((direction == -1 && this.arrowLeftPressed) || (direction == 1 && this.arrowRightPressed) )
                    this.move(direction);
                else 
                    this.stopMove();
            }, this);
            ani.play();
    } else {
        this.move(direction);
    }
};
        
__theClass.prototype.doGetOpen = function() {

    //--- Get some goods:
    var tile = this.isThereSomeGoods();
    if (tile && !this.isThereSomeCover(tile.worldX, tile.worldY, tile.layer.name)) {
        this.showAnimation('open', function() {
            //--- Save goods:
            this.collectedGoods.push(tile); console.log('GOODS:', this.collectedGoods);
            //--- Clear tile:
            tile.index = -1;
            tile.layer.dirty = true;
            //--- OK! I get it: 
            this.showAnimation('yes', this.stopMove.bind(this));
        }.bind(this));
        return;
    }

    //--- Try to open the door:
    var door   = this.isThereSomeDoor(),
        opened = false;
    if (door) {
        if (door.properties && typeof(door.properties.lock) != 'undefined') {
            if (door.properties.lock == '') {
                //--- Just open:
                this.doorOpen(door);
                return ;
            } else {
                //--- Need the key:
                for (var i in this.collectedGoods) {
                    if (this.collectedGoods[i].properties && this.collectedGoods[i].properties.name == door.properties.lock) {
                        //--- Open the door:
                        this.doorOpen(door);
                        return ;
                    }
                }
            }
        } else {
            opened = true;
        }
    }

    //--- Come in:
    if (opened &&
        door.properties &&
        door.properties.gate_target &&
        this.objects.doors[door.properties.gate_target]
        ) {
            var target = this.objects.doors[door.properties.gate_target];
            this.showAnimation('turn', function() {
                this.setPlayerXY(target.x, target.y);
                this.showAnimation('turnback', this.stopMove.bind(this));
            }.bind(this));
        return;
    }

    //--- Sorry, I can't...
    this.showAnimation('no', this.stopMove.bind(this));
};
        
__theClass.prototype.doTest = function() {
    //  For test
    if (this.isPlayerBlockedDown()) {
        this.showAnimation('wow', this.stopMove.bind(this));
        //this.showAnimation('oh', this.stopMove.bind(this));
        //this.showAnimation('eat', function(){ this.showAnimation('lovely', this.stopMove.bind(this)) }.bind(this));
        //this.showAnimation('bye', this.stopMove.bind(this));
        //this.showAnimation('clap', this.stopMove.bind(this));
        //this.showAnimation('get', this.stopMove.bind(this));
        //this.showAnimation('falldown', this.stopMove.bind(this));
        //this.showAnimation('turn', function(){ this.showAnimation('climb', function(){ this.showAnimation('turnback', this.stopMove.bind(this)); }.bind(this)) }.bind(this));
    }
}; 

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

__theClass.prototype.getTileCenterX   = function(tile) { return tile.worldX + tile.width/2; };
__theClass.prototype.getPlayerDeltaX  = function(x)    { return Math.abs(x - this.player.x - this.player.scale.x*5); };
__theClass.prototype.getClimbPosition = function(tile) {
    var centerX  = this.getTileCenterX(tile);
    if (this.getPlayerDeltaX(centerX) < 11) {
        return {
            x      : tile.worldX, 
            xCenter: centerX,
            y      : tile.worldY
        };
    };
return false;    
};
__theClass.prototype.isStair = function(direction) {
    for (var i in this.layers.stairs) {
        var tile = this.map.getTileWorldXY(this.player.x, this.player.bottom + 1*direction, this.map.tileWidth, this.map.tileHeight, this.layers.stairs[i].index);
        if (tile) {
            return this.getClimbPosition(tile);
            break;
        }
    }
    return false;
};
__theClass.prototype.canClimb = function() { 
    return { up:this.isStair(-1), down:this.isStair(1) };
};

/**
 * Find goods in the current position
 * 
 * @returns {scene.prototype.isThereSomeGoods.tile|Boolean}
 */
__theClass.prototype.isThereSomeGoods = function() {
    for (var i in this.layers.goods) {
        var tile = this.map.getTileWorldXY(this.player.x, this.player.bottom - 1, this.map.tileWidth, this.map.tileHeight, this.layers.goods[i].index);
        if (tile) {
            return tile;
            break;
        }
    }
    return false;
};
        
/**
 * Find a door in the current position
 * 
 * @returns {Boolean}
 */
__theClass.prototype.isThereSomeDoor = function() {
    for (var name in this.objects.doors) {
    var gate = this.objects.doors[name],
        x2   = gate.x + gate.width,
        y2   = gate.y + gate.height,
        px   = this.player.left + this.player.width/2,
        py   = this.player.top  + this.player.height/2;
        if (px > gate.x && px < x2 && py > gate.y && py < y2)
            return gate;
    }
    return false;
};

/**
 * Find a cover of the current position ( DUPLICATED??? )
 * 
 * @returns {Boolean}
 */
__theClass.prototype.isThereSomeCover = function(x, y, layerName) {
    var layerIndex = this.map.getLayerIndex(layerName);
    for (var i=layerIndex+1; i<this.map.layers.length; i++) {
        var tile = this.map.getTileWorldXY(x, y, this.map.tileWidth, this.map.tileHeight, i);
        if (tile) { // console.log('cover:', tile);
            return tile;
            break;
        }
    }
    return false;            
};
      
    
//==============================================================================
// Public
//==============================================================================

//------------------------------------------------------------------------------
// Actions (controllers)
//------------------------------------------------------------------------------

__theClass.prototype.actionUp = function() {
    //  Jump & Fly || Climb up
    this.arrowUpPressed = true;
    this.doJumpOrClimbUp();
};

__theClass.prototype.actionUpRelease = function() {
    this.arrowUpPressed = false;
    this.climbStop();
};
        
__theClass.prototype.actionDown = function() {
    this.arrowDownPressed = true;
    this.doClimbDown();
};

__theClass.prototype.actionDownRelease = function() {
    this.arrowDownPressed = false;
    this.climbDownPressed = false;
    this.climbStop();
};

__theClass.prototype.actionLeft = function() {
    this.arrowLeftPressed = true;
    this.doMove(-1);
};

__theClass.prototype.actionLeftRelease = function() {
    this.arrowLeftPressed = false;
    if (!this._transition) this.stopMove();
};

__theClass.prototype.actionRight = function() {
    this.arrowRightPressed = true;
    this.doMove(1);
};

__theClass.prototype.actionRightRelease = function() {
    this.arrowRightPressed = false;
    if (!this._transition) this.stopMove();
};

__theClass.prototype.actionSpace = function() {
    this.doFire();
    //console.log('Fire');
};

__theClass.prototype.actionA = function() {
    this.doGetOpen();
    //console.log('A');
};

__theClass.prototype.actionB = function() {
    this.doTest();
    //console.log('B');
};

//------------------------------------------------------------------------------
// Scene main methods
//------------------------------------------------------------------------------

__theClass.prototype.preload = function (game) {
    
    this.game = game;
    game.load.atlas('dragon',  'assets/sprites/dragon/dragon.png', 'assets/sprites/dragon/dragon.json');
    
};

__theClass.prototype.create = function (x, y, options) {
    
    //--- Init:
    this._init(options);
    
    //--- Create the player:
    if (!this.player) this._createPlayer();
    
    //--- Add player to the world:
    this.game.world.add(this.player);
    
    //--- First show:
    this.setPlayerXY(x, y);
    this.player.animations.play('stay');
    
};

__theClass.prototype.update = function () {
    
    //--- Collide the player and the prizes:
    this.game.physics.arcade.overlap(this.player, this.prizes, function(player, prize) { this.getPrize(prize); return false; }, null, this); //prizes
    
    
    //--- Flying & Falling:
    if (!this.isPlayerBlockedDown()) {
        this._landed = false; // leave the ground
        if (this.player.body.velocity.y > 0) {
            //--- Falling:
            //console.log('Falling:', this.player.body.velocity.y, this.player.body.wasTouching.down, this.player.body.touching.down);
            if (this.player.body.velocity.y > 100) { //--- Hide bounce: (%!!!)
                if (this.arrowUpPressed) {
                    this.flyUp();
                } else {
                    this.fallDown();
                }
            }
        } else {
            //--- Flying:
            //console.log('Flying:', this.player.body.velocity.y, this.player.body.wasTouching.down, this.player.body.touching.down);
        }
    }

    //--- Landidng:
    if (this.isPlayerBlockedDown() && !this._landed) {
        this._landed = true;
        //console.log('Landed:', this.player.body.velocity.y, this.player.body.touching.down, this.player.body.wasTouching.down);
        if (this.player.body.velocity.x === 0) {
            this.doStay();
        } else {
            this.doGo();
        }
    }

    //--- Climbing:
    this.climbState = this.canClimb();

    if (this.climbState.up || this.climbState.down) {
        if (this.player.body.gravity.y) {
            //--- Disable gravity:
            this.player.body.velocity.y = 0;
            this.player.body.bounce.y   = 0;
            this.player.body.gravity.y  = 0;
            //--- Align by Y:
            if (this.climbState.down && (this.player.y - this.climbState.down.y < 3)) {
                this.player.body.prev.x = this.player.body.x;
                this.player.body.prev.y = this.player.body.y;
                this.player.y = this.climbState.down.y;
            }
            //console.log('ready to climb: ', this.player.y, this.climbState.down.y);
        }
    } else {
        if (this.player.body.gravity.y === 0) {
            //console.log('restore gravity');
            //--- Restore gravity:
            if (this.player.animations.currentAnim.name === 'climb') {
                this.player.body.velocity.y = 0;
            }
            this.player.body.gravity.y  = this.gravityY;
            this.player.body.bounce.y   = this.bounce;
            if (this.player.animations.currentAnim.name === 'climb') {
                this.showAnimation('turnback', this.stopMove.bind(this));
            }
        }
    }
            
};

//==============================================================================
// Exports module values:
//==============================================================================

module.exports = {
    
    /**
     * The class to inherit
     * 
     * example:
     * 
     * function childClass() {
     *      theclass.apply(this, arguments);
     * }
     * 
     * childClass.prototype = Object.create(theclass.prototype);
     * childClass.prototype.constructor = childClass;
     * 
     */
    theclass: __theClass,
    
    /**
     * The class factory
     * 
     * @param   {object} options The JS object with initial class parameters
     * @returns {object}         A new instance of this class
     */
    create: function (id) {
        
        if (!id) id = instanceDefaultId;
        if (!instances[id]) {
             instances[id]    = new __theClass();
             instances[id].id = id;
        }
        
        return instances[id];
        
    },
    
    getInstances: function() { return instances;  }

};