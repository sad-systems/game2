/*==============================================================================
 *  Title      : Cookies
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 18.06.2016
 *==============================================================================
 */

//==============================================================================
// Exports module values:
//==============================================================================

module.exports = {

    /**
     * create - creates Cookies
     * 
     * @param name
     * @param value
     * @param days
     * @param path
     * @param domain
     * @param secure
     */
    create: function (name, value, days, path, domain, secure) {
        
        if (name) {
            var name_value = name + '=' + escape(value)+'; ';
            var expires    = '';
            var cpath      = ''; if (path)     cpath = 'path='+path+'; ';
            var cdomain    = ''; if (domain) cdomain = 'domain='+domain+'; ';
            var csecure    = ''; if (secure) csecure = 'secure';
            if (days) {
                var date = new Date();
                date.setTime(date.getTime()+(days*24*60*60*1000));
                expires = "expires="+date.toGMTString()+'; ';
            };
            document.cookie = name_value + expires + cpath + cdomain + csecure;
        }
        
    },

    /**
     * erase - erases Cookies
     * 
     * @param {type} name
     */
    erase: function (name) { this.create(name,"",-1); },

    /**
     * Read Cookies
     * 
     * @param {String} name
     * @returns {String} Cookies string
     */
    read: function (name) {
        
        var nameEQ = name + "=",
            ca = document.cookie.split(';');
    
        for(var i=0; i<ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0)==' ') c = c.substring(1,c.length);
            if (c.indexOf(nameEQ) == 0) return unescape(c.substring(nameEQ.length, c.length));
        }
        
        return null;
        
    },

    /**
     * pack - pack an Object to a String
     * 
     * @param {Object} obj
     * @returns {String}
     */
    pack: function (obj) {
        
        switch (typeof(obj)) {
            case 'function':;
            case 'undefined': 
                return "''";
            case    'object': 
                
                if (obj==null) return "''";
                var data = "";
                var sp   = "";
                for (var id in obj)
                {
                 data += sp+ "'"+id+"'"+':'+this.pack(obj[id]);
                 sp = ",";
                };
                data = "{"+data+"}";
                return data;

            case 'boolean':;
            case  'number':
                return obj;

            default: 
                return "'"+escape(obj)+"'";   
        };
    },

    /**
     * unpack - unpack a String to an Object
     *  
     * @param {String} str
     * @returns {Object}
     */
    unpack: function (str) {
        
        function _unpack (obj) {
            switch (typeof(obj)) {
                case  'object': if (obj==null) return "";
                                for (var id in obj) obj[id] = _unpack(obj[id]);
                                return obj;
                case 'boolean':;
                case  'number':return obj;
                default: return unescape(obj);   
            };
        };
        
        var data = null;
        
        if (typeof(str)=='string') {
            try   { eval("data = "+str); }
            catch (e) {};                                      
            if (typeof(data)=='object') data = _unpack(data);
        };
        
        return data;
    }
    
};



