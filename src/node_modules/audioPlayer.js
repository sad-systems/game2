/*==============================================================================
 *  Title      : Audio player
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 19.06.2016
 *==============================================================================
 */

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------


//==============================================================================
// The Class
//==============================================================================

/**
 * Constructor
 * 
 * @param   {object} options    The JS object with initial class parameters
 * @returns {object}            A new instance of this class
 */
var AudioPlayer = function (game, options) {

    this.game   = game;
    this.volume = 0.5;
    this.enable = true;
    this.single = true;
    
    this._init(options);
    
    this._tracks       = {};  //<--- audio tracks collection
    this._currentTrack = null;
    
    return this;

};

AudioPlayer.prototype = {
//------------------------------------------------------------------------------
// Config
//------------------------------------------------------------------------------

    //volume: 0.5,
    
//------------------------------------------------------------------------------
// Protected
//------------------------------------------------------------------------------

    /**
     * Initialization
     * 
     * @protected
     * @param {object} options  The JS object with initial class parameters
     */
    _init: function (options) {

        //--- Extend the instance:
        Phaser.Utils.extend(true, this, options); // by Phaser

    },

    _getTrack: function (key) {
        
        if (!key) return false;
        if (!this._tracks[key]) this._tracks[key] = this.game.add.audio(key);
        return this._tracks[key];
        
    },

//------------------------------------------------------------------------------
// Public
//------------------------------------------------------------------------------

    getEnable: function () {
        return this.enable;
    },
    
    setEnable: function (value) {
        this.enable = value;
        this.enable ? this.activate() : this.stop();
    },
    
    toggleEnable: function () {
        this.setEnable(!this.enable);
        return this.getEnable();
    },
    
    activate: function() {
        //--- Single mode: (plays only current track)
        if (this.single) {
            if (this._currentTrack) this._currentTrack.play();
            return;
        }
        //--- Multy mode: (plays tracks with loop == 2)
        for (var _key in this._tracks) {
            if (this._tracks[_key].loop == 2) { this._tracks[_key].play(); }
        }        
        
    },
    
    play: function (key, loop, volume) {
        
        //--- Do not play the same track is currently playing:
        if (this._currentTrack && this._currentTrack.key == key && this._currentTrack.isPlaying) return;
        //--- Stop currently playing track if it is a single mode:
        if (this._currentTrack && this.single) this._currentTrack.stop();
        
        var track = this._getTrack(key) || this._currentTrack;
        if (track) {
            this._currentTrack = track;
            if (typeof(loop)   != 'undefined') track.loop = loop;
            if (typeof(volume) != 'undefined') 
                track.volume = this.volume * volume;
            else 
                track.volume = this.volume;
            if (this.enable) track.play();
        }
        
    },
    
    stop: function(key) {
        if (this.single) {
            //--- Stop current:
            if (this._currentTrack) this._currentTrack.stop();
        } else {
            if (key) {
                //--- Stop specific:
                this._tracks[key].stop();
            } else {
                //--- Stop all:
                for (var _key in this._tracks) {
                    this._tracks[_key].stop();
                }
            }
        }
    },

    clear: function(key) {
        var track = this._getTrack(key) || this._currentTrack;
        if (track) {
            if (track === this._currentTrack) { delete this._currentTrack; }
            delete this._tracks[track.key];   
            track.destroy();
        }
    },
    
    clearAll: function() {
        for (var key in this._tracks) {
            this.clear(key);
        }
    }

};

//==============================================================================
// Exports module values:
//==============================================================================

module.exports = {
    
    /**
     * The class to inherit
     * 
     * example:
     * 
     * function childClass() {
     *      theclass.apply(this, arguments);
     * }
     * 
     * childClass.prototype = Object.create(theclass.prototype);
     * childClass.prototype.constructor = childClass;
     * 
     */
    theclass: AudioPlayer,
    
    /**
     * The class factory
     * 
     * @param   {object} options The JS object with initial class parameters
     * @returns {object}         A new instance of this class
     */
    create: function (game, options) {

        return new AudioPlayer(game, options);

    }

};