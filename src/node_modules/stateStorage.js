/*==============================================================================
 *  Title      : State storage (Singleton)
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 28.05.2016
 *==============================================================================
 */

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------

var instance,       // Single instance
    storage = {},   // Global storage
    data    = null; // Current storage (link to global)

//==============================================================================
// The Class
//==============================================================================

/**
 * Constructor
 * 
 * @param   {object} options    The JS object with initial class parameters
 * @returns {object}            A new instance of this class
 */

var StateStorage = function (options) {
    
    this.currentSceneName = '';
    this.currentMapName   = '';
    
    this.init(options);
    return this;
    
};

StateStorage.prototype = {

//------------------------------------------------------------------------------
// Protected
//------------------------------------------------------------------------------

    /**
     * Initialization
     * 
     * @protected
     * @param {object} options  The JS object with initial class parameters
     */
    init : function (options) {

        //--- Extend the instance:
        //$.extend( true, this, options );        // by jQuery   
        Phaser.Utils.extend(true, this, options); // by Phaser
        
        data = storage[this.currentSceneName] = storage[this.currentSceneName] || {};
        data = data[this.currentMapName] = data[this.currentMapName] || {};
        
    },

//------------------------------------------------------------------------------
// Public
//------------------------------------------------------------------------------

    arrayToStateId: function (arr) {
        if (!(arr instanceof Array)) {
            console.error('stateId mast be an Array for:', arr);
            return;
        }
        var narr    = arr.slice(),    //--- copy an array
            section = narr.shift(),   //--- 'Section' is the first element
            id;      
        switch (section) {
            case 'tiles':
                id = narr[0] + ':' + narr[1] + ':' + narr[2];
                break;
            default:
                id = narr.join(':');  //--- Others is ID
        }
        return [section, id, narr];
    },

    save : function(arr) {
        
        var obj = arr;
        
        if (!(arr instanceof Array)) {
            if (!arr.stateId) {
                //console.error('No stateId for:', arr);
                return;
            } else {
                arr = arr.stateId;
            }
        }
        
        var d       = this.arrayToStateId(arr),
            section = d[0];
            stateId = d[1];
            
        //--- Addition for blocks:    
        if (section === 'blocks') {
            d[2].push(obj.x);
            d[2].push(obj.y);
        }
        //-------------------------
        
        data[section]          = data[section] || {};
        data[section][stateId] = d[2];
        
        //console.log('STORE:  ', arr);
        //console.log('STORAGE:', storage);
        
    },
    
    get : function(arr, mapName, sceneName) {
        var d       = this.arrayToStateId(arr),
            section = d[0],
            stateId = d[1];

        mapName   = mapName   || this.currentMapName;
        sceneName = sceneName || this.currentSceneName;
        if (!storage[sceneName] || !storage[sceneName][mapName] || !storage[sceneName][mapName][section]) return false;
        return storage[sceneName][mapName][section][stateId];
        
    },
    
    getSection: function(section, mapName, sceneName) {
        mapName   = mapName   || this.currentMapName;
        sceneName = sceneName || this.currentSceneName;
        if (!storage[sceneName] || !storage[sceneName][mapName]) return false;
        return storage[sceneName][mapName][section];
    },

//------------------------------------------------------------------------------
    end: null
};

//==============================================================================
// Exports module values:
//==============================================================================

module.exports = {
    
    /**
     * The class to inherit
     * 
     * example:
     * 
     * function childClass() {
     *      theclass.apply(this, arguments);
     * }
     * 
     * childClass.prototype = Object.create(theclass.prototype);
     * childClass.prototype.constructor = childClass;
     * 
     */
    theclass: StateStorage,

    /**
     * Singleton
     * 
     * @param   {object} options
     * @returns {object}
     */
    getInstance: function (options) {
        if (!instance) { 
            instance = new StateStorage(options);
        } else {
            instance.init(options);
        }
        return instance;
    }

};