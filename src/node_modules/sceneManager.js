/*==============================================================================
 *  Title      : Scene Manager
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 27.04.2016
 *==============================================================================
 */

var game;
var gameWidth,
    gameHeight;

function setLoader() {
    
    var message    = __("Loading") + "...",
        style      = { font: "bold 32px Arial", fill: "#fff", boundsAlignH: "center", boundsAlignV: "middle" },
        centerX,//    = game.width/2,
        centerY,//    = game.height/2,
        lineWidth,//  = game.width/2,
        lineHeight,// = 1,
        lineX,//      = -(lineWidth/2),
        lineY;//      = 0;
    
    var text,
        graph;   
    
    function showLoader() {
        centerX    = game.width/2;
        centerY    = game.height/2;
        lineWidth  = game.width/2;        
        lineHeight = 1;
        lineX      = -(lineWidth/2);
        lineY      = 0;
        //--- Add the text message:
        text = game.add.text(centerX, centerY, message, style);
        text.anchor.set(0.5);
        text.setShadow(3, 3, 'rgba(125,125,125,0.5)', 2);
        //--- Add the progress bar:
        graph = game.add.graphics(centerX, centerY + text.height + text.height/2);   
        graph.lineStyle(1, 0x888888, 1); 
        graph.beginFill(0x333333, 1);
        graph.drawRect(lineX-1, lineY-1, lineWidth+1, lineHeight+1);
        graph.endFill();  
    }
    
    function hideLoader() {
        text.destroy();
        graph.destroy(); //graph.clear();
    }

    function progressShow(x) {
            graph.lineStyle(1, 0x888888, 1); 
            graph.beginFill(0x333333, 1);
            graph.drawRect(lineX-1, lineY-1, lineWidth+1, lineHeight+1);
            graph.endFill();
            //---
            graph.lineStyle(0);
            graph.beginFill(0x00ffff, 1);
            graph.drawRect(lineX, lineY, lineWidth*(x/100), lineHeight);
            graph.endFill(); 
            text.text = message + ' ' + x + '%';
    }    
    
    game.load.onLoadStart.add(function(){ //console.log('Load start: ');
        game.camera.resetFX();
        showLoader();
    });

    game.load.onFileComplete.add(function(progress, fileKey, success){
        progressShow(progress);
    });
    game.load.onLoadComplete.add(function(){
        hideLoader();
    }); 
    
};

//------------------------------------------------------------------------------
// Scene Manager
//------------------------------------------------------------------------------

var sceneManager = {
    
    effectDuration: 1000,
    effectColor:    "#000",
    
    create:  function(g) {
        game = g ? g : this.game; 
        //--- Show the entire game display area while maintaining the original aspect ratio:
        game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
        //--- Init loader:
        setLoader();
        return this; 
    },
    
    getGame: function()  { return game; },
    
    begin: function(callback) {
        game.camera.onFlashComplete.addOnce(function(){ 
            if (typeof(callback) === 'function') callback(game);
            //console.log('scene begining'); 
        });
        game.camera.flash(this.effectColor, this.effectDuration);
    },
    
    end: function(callback) {
        game.camera.onFadeComplete.addOnce(function(){ 
            if (typeof(callback) === 'function') callback(game);
            //console.log('scene ended'); 
        });
        game.camera.fade(this.effectColor, this.effectDuration);
    },

    next: function(nextSceneName, callback) { //console.log('next: '+nextSceneName);
        this.end(function() {
            game.extentions.audio.sound.stop(); //<--- stop all sounds of the scene, but the music can still play...
            game.state.clearCurrentState();
            game.camera.resetFX();
            game.state.add  (nextSceneName, require(nextSceneName));
            game.state.start(nextSceneName);
            if (typeof(callback) === 'function') callback(game);
        });
    },
    
    gotoFullScreen: function() {
        if (game.scale.isFullScreen)
        {
            game.scale.stopFullScreen();
            //--- Restore defaults:
            if (game.width !== gameWidth) {
                game.scale.setGameSize(gameWidth, gameHeight);
                //console.log('RESTORE: ' + gameWidth +'x'+ gameHeight);
            }
        }
        else
        {
            //--- Save game default W & H:
            if (!gameWidth)  gameWidth  = game.width;
            if (!gameHeight) gameHeight = game.height;
            //game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT; // Full Scale
            //game.scale.fullScreenScaleMode = Phaser.ScaleManager.NO_SCALE; // No scale
            game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL; // Proportional Scale
            game.scale.onFullScreenChange.addOnce(function(){ //--- Bug fix!
                if (game.scale.isFullScreen) {
                    game.canvas.parentNode.style.width = 'auto'; // centering 
                } 
            });
            game.scale.startFullScreen(false);
            //--- Resize game width:
            var screenWidth  = window.screen.width; //game.scale.bounds.x*2 + game.scale.bounds.width,
                screenHeight = window.screen.height;//game.scale.bounds.y*2 + game.scale.bounds.height,
                ratio        = screenWidth/screenHeight,
                newWidth     = game.height * ratio;
                //console.log(screenWidth + 'x' + screenHeight + ' ratio: ' + ratio + ' newWidth: ' + newWidth);
            if (ratio > 1 && ratio > game.scale.sourceAspectRatio) {
                game.scale.setGameSize(newWidth, game.height);
                //console.log('RESIZE: ' +newWidth +'x'+ game.height);
            }            
        }
    },
    
    setCamera: function(object, borderXP, borderYP) {
        //--- Set camera:
        game.camera.follow(object);
        
        if (typeof(borderXP) === 'undefined') borderXP = 0.2;
        if (borderXP && borderXP>100) borderXP /= 100;
        if (!borderYP) borderYP = borderXP;
        if (borderXP) {
            //var h = 160;
            //this.game.camera.deadzone = new Phaser.Rectangle(this.game.camera.width/2, h, 0, this.game.camera.height - h*2);
            var x = game.camera.width  * borderXP, // %
                y = game.camera.height * borderYP; // %    
            game.camera.deadzone = new Phaser.Rectangle(x, y, game.camera.width - x*2, game.camera.height - y*2);
        }
    }
 
};

//------------------------------------------------------------------------------
// Exports
//------------------------------------------------------------------------------

module.exports = sceneManager;

//------------------------------------------------------------------------------
// Temp
//------------------------------------------------------------------------------

  /**
   * Find main sceme name
   *   
   var scenes     = require('./application-scenes');
   var defaultMainSceneName = config.mainSceneName;
   var mainSceneName;
   
   for (var file in scenes) {
        var sceneName = scenes[file];
        if (!sceneName || typeof(sceneName) !== 'string') {
            sceneName = file.replace(/^\.+\/|\.js$/gm, '');
        }
        //--- Save first in the list:
        if (!mainSceneName) {
            mainSceneName = sceneName;
        }
        //--- Check default:
        if (defaultMainSceneName && sceneName === defaultMainSceneName) {
            mainSceneName = sceneName;
            break;        
        }
   }
   */
   //console.log(mainSceneName);