/*==============================================================================
 *  Title      : User Interface manager
 *  Author     : Digger (c) SAD-Systems <http://sad-systems.ru>
 *  Created on : 18.06.2016
 *==============================================================================
 */

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------


//==============================================================================
// The Class
//==============================================================================

/**
 * Constructor
 * 
 * @param   {object} options    The JS object with initial class parameters
 * @returns {object}            A new instance of this class
 */
var UIManager = function (game, options) {

    this.game = game;
    this._init(options);
    return this;

};

UIManager.prototype = {
//------------------------------------------------------------------------------
// Config
//------------------------------------------------------------------------------

    defaultAlignX: 'center',
    defaultAlignY: 'top',
    
    styles: {
        /*
        label: {
            fill     : '#ffd801'
        },
        
        text: {
            align    : 'center',
            fill     : '#ffd801',
            fontSize : '24px'
        },
        
        smallText: {
            fill     : '#ffd801',
            fontSize : '18px'
        },
        
        name: {
            fill     : '#ffffff',
            fontSize : '18px'
        },
        
        link: {
            styles: {
                
                normal: {
                    fill     : '#ffffff',
                    fontSize : '18px'
                },
                
                over: {
                    fill     : '#0000ff'
                }
                
            }
        },
        
        button: {
            styles: {
                
                normal: {
                    fill            : '#ffd801',
                    stroke          : '#bb9c2e',
                    strokeThickness : 5,
                    shadowOffsetX   : 3,
                    shadowOffsetY   : 3,
                    shadowFill      : true,
                    shadowBlur      : 3,
                    shadowColor     : 'rgba(0,0,0,0.5)'
                },

                disable: {
                    fill            : '#888888',
                    stroke          : '#aaaaaa',
                    strokeThickness : 4,
                    shadowOffsetX   : 3,
                    shadowOffsetY   : 3,
                    shadowFill      : true,
                    shadowBlur      : 3,
                    shadowColor     : 'rgba(0,0,0,0.5)'
                },

                over: {
                    fill : '#fdec8c'
                },

                out: {
                    fill : '#ffd801'
                },

                down: {
                    fill            : '#6c0c0c',
                    shadowFill      : false
                },

                up: {
                    fill : '#ffd801',
                    strokeThickness : 5,
                    shadowFill      : true
                }                
            }
        }
        */
    },
    
//------------------------------------------------------------------------------
// Protected
//------------------------------------------------------------------------------

    /**
     * Initialization
     * 
     * @protected
     * @param {object} options  The JS object with initial class parameters
     */
    _init: function (options) {

        //--- Extend the instance:
        Phaser.Utils.extend(true, this, options); // by Phaser

    },

    getStyle: function (styleName) {
        
        var style = typeof(styleName) === 'string' ? this.styles[styleName] : styleName;
        if (!style || typeof(style) !== 'object') style = {};
        
        return style;
        
    },

    setStyle: function (obj, styleName) {
        
        var style = this.getStyle(styleName);
        
        //--- copy styles:        
        for (var i in style) {
            if (i === 'styles') continue; //<-- ignore inserted styles
            obj[i] = style[i];
        }
        
    },
    
    getAlignX: function (align) {
        align = align || this.defaultAlignX;
        switch (align) {
            case 'left':  return 0;
                break;
            case 'right': return 1;
                break;
            default:      return 0.5; // center
                break;
        }
    },

    getAlignY: function (align) {
        align = align || this.defaultAlignY;
        switch (align) {
            case 'top':    return 0;
                break;
            case 'bottom': return 1;
                break;
            default:       return 0.5; // center
                break;
        }
    },

    setOptions: function (options) {
        
        options = options || {};
        
        options.x       = options.x || 0;
        options.y       = options.y || 0;
        options.anchorX = this.getAlignX(options.anchorX);
        options.anchorY = this.getAlignY(options.anchorY);
        
        return options;
        
    },    
    
//------------------------------------------------------------------------------
// Public
//------------------------------------------------------------------------------    

    createLabel: function (text, options) {
        
        var o = this.setOptions(options);
        
        var label = this.game.make.text(o.x, o.y, text);
            label.anchor.set(o.anchorX, o.anchorY);
        this.setStyle(label, o.style || 'label');
        
        return label;
        
    },
    
    createText: function (textArray, options) {
        
        var o = this.setOptions(options);
        
        if (typeof(textArray) === 'string') textArray = [ textArray ];
        
        var textGroup = this.game.add.group(),
            textLine,
            text,
            yy = 0;
            textGroup.x = o.x;
            textGroup.y = o.y;
            
        for (var i in textArray) {
            text     = textArray[i];
            textLine = this.game.make.text(0, 0 + yy, text);
            textLine.anchor.set(o.anchorX, o.anchorY);
            yy += textLine.height;
            this.setStyle(textLine, o.style || 'text');
            textGroup.add(textLine);
        }
            
        return textGroup;    
    },

    createImg: function (imgName, options) {
        
        var o = this.setOptions(options);

        imgName = imgName || o.key;
        if (!imgName) return null;

        var img = this.game.make.image(o.x, o.y, imgName, o.frame);
            img.anchor.set(o.anchorX, o.anchorY);
            
        return img;    
        
    },
    
    createLink: function (href, options) {
        
        if (!href) return;
        
        var o = this.setOptions(options);

        var text;
        
        if (href instanceof Array) {
            text = href[1];
            href = href[0];
        }
        text = text || href;
        
        
        var label = this.game.make.text(0, 0, text);
        label.anchor.set(o.anchorX, o.anchorY);
        
        var _style = this.getStyle(o.style || 'link');
            _style = _style.styles || {};
        this.setStyle(label, _style.normal);
        
        var button = this.game.make.button(o.x, o.y, null, null, this);
            button.onInputDown.add(function(){ 
                this.setStyle(label, _style.down); 
                window.open(href, '_blank');
            }, this);
            button.onInputOver.add(function(){
                this.setStyle(label, _style.over); 
            }, this);
            button.onInputOut.add(function(){
                this.setStyle(label, _style.normal); 
            }, this);
            button.addChild(label);
            
        return button;
        
    },
    
    createButton: function (text, options) {
        
        var self = this;
        
        function setState(state, button) {
            button = button || this;
            button.options.state = state;
            for(var i in button.children) {
                var child = button.children[i];
                if (child instanceof Phaser.Text) {
                //    self.setStyle(child, state ? button.options.styles.active : button.options.styles.normal );
                }
                if (child instanceof Phaser.Image) {
                    if (state) {
                        child.alpha = 1;    //<--- checked
                    } else {
                        child.alpha = 0.5;  //<--- uncheced
                    }
                    child._alpha = child.alpha;
                }
            }
        }
        
        function setImage(_img, frameName) {
            if (_img) {
                if (o.img[frameName]) {
                    _img.frameName = o.img[frameName]; 
                } 
                //--- Hilight:
                    switch (frameName) {
                        case 'normal':
                        case 'out':
                            _img.alpha = _img._alpha;
                            break;
                        case 'over':
                            _img.alpha = 0.75;
                            break;
                        case 'disable':
                            _img.blendMode = PIXI.blendModes.SCREEN;
                            break;
                    }
            }
        }
        
        var o = this.setOptions(options);
        
        var _style = this.getStyle(o.style || 'button');
            _style = _style.styles || {}; 
        o.styles = _style;    
            
        var _img;
        if (o.img) {
            if (typeof(o.img) !== 'object') o.img = { key:o.img };
            _img = this.createImg('', o.img);
        }
        
        var button,
            label = this.game.make.text(0, 0, text);
            label.anchor.set(o.anchorX, o.anchorY);
        if (_img) {
            var s = 1,                                          //<--- 1-left side, -1-right side
                a = -1 * o.anchorX,                             //<--- anchor x
                w = label.width + _img.width + (text ? 10 : 0); //<--- +10 space between image & label
            label.x = s * -a * (w - label.width);
             _img.x = s *  a * (w - _img.width);
        } 
        
        if (!o.disable) {
            
            this.setStyle(label, _style.normal);
            setImage(_img, 'normal');
            
            button = this.game.make.button(o.x, o.y, null, null, this);
            button.onInputOver.add(function(){ this.setStyle(label, _style.over); setImage(_img, 'over'); }, this);
            button.onInputOut.add (function(){ this.setStyle(label, _style.out);  setImage(_img, 'out');  }, this);
            button.onInputDown.add(function(){ 
                this.setStyle(label, _style.down); 
                setImage(_img, 'down');
                if (typeof(o.onDown) === 'function') o.onDown(button); 
            }, this);
            button.onInputUp.add  (function(){ this.setStyle(label, _style.up); setImage(_img, 'up'); }, this);
            button.addChild(label);
            
        } else {
            
            this.setStyle(label, _style.disable);
            setImage(_img, 'disable');
            label.x = o.x;
            label.y = o.y;
            button = label;
            
        }
        
        if (_img) button.addChild(_img);

        //--- Save options inside:
        button.options = o;
        //--- Set state:
        button.setState = setState;
        button.setState(o.state);

        return button;
        
    },
    
    //--------------------------------------------------------------------------
    // Text group
    //--------------------------------------------------------------------------
    
    createGroup: function (dataArray, options) {
        
        if (! dataArray ) return;
        if (!(dataArray instanceof Array)) dataArray = [ dataArray ];
        
        var o = this.setOptions(options);
        
        var group = this.game.add.group();
            group.x = o.x;
            group.y = o.y;
        
        var spaceY = 0;
        
        for (var i in dataArray) {
            
            var data = dataArray[i];
            if (data === null) continue;
            if (typeof(data) !== 'object') data = { text:data };
            
            var options    = data.options || {};
                options.y  = options.y || 0;
                options.y += group.height + spaceY;    //<--- Line offset

            spaceY = (o.spaceY || 0); //<--- space between lines
            
            if (data.label)  { group.add(this.createLabel (data.label,  options)); continue; }
            if (data.text)   { group.add(this.createText  (data.text,   options)); continue; }
            if (data.img)    { group.add(this.createImg   (data.img,    options)); continue; }
            if (data.link)   { group.add(this.createLink  (data.link,   options)); continue; }
            if (data.button) { group.add(this.createButton(data.button, options)); continue; }

        }
        
        return group;
        
    }

};

//==============================================================================
// Exports module values:
//==============================================================================

module.exports = {
    
    /**
     * The class to inherit
     * 
     * example:
     * 
     * function childClass() {
     *      theclass.apply(this, arguments);
     * }
     * 
     * childClass.prototype = Object.create(theclass.prototype);
     * childClass.prototype.constructor = childClass;
     * 
     */
    theclass: UIManager,
    
    /**
     * The class factory
     * 
     * @param   {object} options The JS object with initial class parameters
     * @returns {object}         A new instance of this class
     */
    create: function (game, options) {

        return new UIManager(game, options);

    }

};